module StrongNat where

import Prelude
import Arithmetic
import LessThanNat
import LessThanNat_lt_eq_True -- ??? I guess trellys imports are not transitive ???

-- * Strong induction
--   ----------------

-- Strong elimination / course-of-values (cov) induction / structural
-- induction: allows recursion on any structural subterm, not just the
-- predecessor.
--
--   cov : [p:Nat -> Type 0]
--      -> ((n:Nat) -> ((m:Nat) -> [m < n] -> p m) -> p n)
--      -> ((n:Nat) -> p n)

-- The index trick used to implement cov
-- -------------------------------------
--
-- This cov implementatoin depends on a (general) index trick [1] that
-- captures the relation between weak and strong recursion.  You use
-- cov when you want to write a recursive function r from Nat to some
-- rng type T
--
--   r : (n:Nat) -> T
--
-- where (r n) may recurse on values smaller than (pred n), and so
-- weak recursion won't work.  The /index trick/ is to instead define
-- an r' by weak induction on i
--
--   r' : [i:Nat] -> (n:Nat) -> [n < i] -> T
--
-- where i is a dummy index used to make the weak induction work.
-- Then r is defined in terms of r' by
--
--   r = \n . r' [S n] n [proof that n < S n]
--
-- So, how does r' work?  Well, since we assume that whenever (r n)
-- recurses, say on n', that n' is less than n, say
--
--   r n = ... r n' and n' < n ...
--
-- we can make (r' [i] n [_]) recurse on a proof that n' < pred i,
-- since integer less-than satisfies a strong transitivity law
--
--   n' < n /\ n < i -> n' < pred i
--
-- I.e., r' is defined by
--
--   r [i] n [i_lt_n] = ... r' [pred i] n' [proof that n' < pred i from n' < n at n < i] ...
--
-- where the "..." is same as in r.
--
-- [1] like dummy Nat indices on datatypes as suggested by Aaron to
--     work around the fact that we don't generate induction
--     principles for each datatype.

-- How the index trick is used in cov
-- ----------------------------------
--
-- Recall the type of cov
--
--   cov : [p:Nat -> Type 0]
--      -> ((n:Nat) -> ((m:Nat) -> [m < n] -> p m) -> p n)
--      -> ((n:Nat) -> p n)
--
-- The second argument, f say, is a recursive template [2]
--
--   f : (n:Nat) -> ((m:Nat) -> [ltT m n] -> p m) -> p n
--
-- and f's second argument, gn say, is the recursion
--
--   gn : (m:Nat) -> [ltT m n] -> p m
--
-- The strategy of cov is to build the recursion gn and pass it to f
-- to compute (p n).  The obvious approach is to define
--
--   g : (n:Nat) -> (m:Nat) -> [ltT m n] -> p m
--
-- by recursion on n and hence gn is (g n).  That was my first
-- approach (commented out below), but my implementation had to case
-- match on the less-than proof, meaning the less-than proof would
-- have to made run-time [3], which is sloppy.
--
-- The index trick provides a better version of g.  We instead define
-- g by recursion on a dummy index i
--
--   g : [i:Nat] -> (n:Nat) -> [ltT n i] -> ((m:Nat) -> [ltT m n] -> p m)
--
-- where gn is (g _ n _).  The implementation of g is easy.  Roughly
--
--   g = \[i] n [n_lt_i] m [m_lt_n] .
--       f m (g [pred i] m [proof that m < pred i])
--
-- or erased, roughly
--
--   |g| = \n m . |f| m (|g| m)
--
-- which is quite nice :)
--
-- [2] cf. the recursive templates of type ((a -> b) -> (a -> b))
--     passed to a Y-combinator).  For cov we have, roughly, a
--     template of type (a -> (a -> b) -> b), and this connection is
--     explored next.
--
-- [3] Like eliminating Prop to produce Set in Coq, which is not
--     allowed there for the same reason my first cov implementation
--     doesn't type check when the less-than proofs are erased.

-- Our cov corresponds to (Y o flip) in LC
-- ---------------------------------------
--
-- cov erases to
--
--   sn := |cov| = \ f . let g = (rec g . \ n . \ m . f m (g m))
--                       in                     \ n . f n (g n)
--
-- which is "equivalent", as an untyped lambda term, to
--
--   Y o flip
--
-- for (o) = compose.
--
-- This is not surprising: strong elimination takes an f of the form
--
--   f := \ n g . body g,
--
-- where g is used in recursive positions in body, and produces a
-- version of f that calls itself recursively, i.e.
--
--   sn f = \ n . body (sn f)
--
-- Hence
--
--   sn f = Y (\ g n . body g)
--        = Y (flip (\ n g . body g))
--        = Y (flip f)
--
-- Details for the above term sn: let
--
--   Y g   = g (Y g) -- E.g. \g . U (g o U), for U g = g g
--   K x y = x
--
-- then we can rewrite sn as
--
--   \ f . let g = \g . K (\ m . f m (g m))
--         in              \ n . f n (Y g n)
--
-- where
--
--   \ n . f n (Y g n) =   \ n . f n (g (Y g) n)
--                     =   \ n . f n (\ m . f m (Y g m))
--                     =   flip f    (\ m . f m (Y g m))
--
-- and so \n . f n (Y g n) is a fixed point of flip f, and so,
-- assuming the equivalence of fixed points, we get
--
--   sn = Y o flip.
cov : [p:Nat -> Type 0]
   -> ((n:Nat) -> ((m:Nat) -> [ltT m n] -> p m) -> p n)
   -> ((n:Nat) -> p n)
cov = \[p] f .
  -- g _ n _ : (m:Nat) -> LT m n -> p m, and so proves p n via f
  let g [_] = ((recnat g [i] = \n [n_lt_i] m [m_lt_n] .
    let [i_eq] [_]    = m_lt_n__n_eq_SPn n i n_lt_i in       -- i = S (pred i)
    let [m_lt_i'] [_] = lt_trans_pred m n i m_lt_n n_lt_i in -- m < pred i
    f m (g [pred i] [i_eq] m [m_lt_i'])
           ): [i:Nat] -> (n:Nat) -> [ltT n i] -> ((m:Nat) -> [ltT m n] -> p m))
  in \n . f n (g [Succ n] n [m_lt_Sm n])

{- And here's the first version of StrongNat.

   It's totally broken as is, because it cases on the erased LT proof
   (like eliminating Prop to produce Set in Coq).  Making the LT proof
   run-time should fix it, but the above second version is much nicer.

-- Strong elimination / course-of-values induction / structural
-- induction: allows recursion on any structural subterm, not just the
-- predecessor.
strongNat : [p:Nat -> Type 0]
         -> ((n:Nat) -> ((m:Nat) -> [LT m n] -> p m) -> p n)
         -> ((n:Nat) -> p n)
strongNat = \[p] f .
  -- g n : (m:Nat) -> LT m n -> p m, and so proves p n via f
  let g [_] = ((recnat g n = case n [eq_n] of
    -- m < 0, a contradiction
    Zero    -> \m [lt_p] .
      poe [p m] [lt_0__F [m] [conv lt_p by eq_n at h.LT m h]]
    -- m < S n' -> m < n' \/ m = n'
    Succ n' -> \m [lt_p] .
      case (lt__lteq [m] [n'] [conv lt_p by eq_n at h.LT m h]) [_] of
        -- m < n', so g n' recursively proves p m
        InL lt_p'  -> g n' [eq_n] m [lt_p']
        -- n' = m, so f proves p m via g n'
        InR n_eq_m -> (conv (f n' (g n' [eq_n])) by n_eq_m at h.p h)
           -- this is g's type annotation, is there a better way to do
           -- this?
           ): (n:Nat) -> ((m:Nat) -> [LT m n] -> p m))
  in \n . f n (g n)
-}

-- * Logical division
--   ----------------

-- cf. Arithmetic.div
--
-- m `cdiv` n = \ceiling{ m / S n }

-- Define the predicate here to avoid need for let defs in context
cdiv_p : Nat -> Type 0
cdiv_p = \w.Nat  -- NatElimination.constNat

cdiv : Nat -> Nat -> Nat
cdiv = \m n .
       let f [f_def] = ((\m g . case m [m_eq] of
         Zero    -> conv Zero by (join : Nat = cdiv_p m) at h.h
         Succ m' -> let [lt_p] [_] = conv (s_minus_s__lt m' n)
                                   by (sym Nat Nat m (Succ m') m_eq)
                                   at m.ltT ((minus (Succ m') (Succ n))) m in
                    let recg [_] = conv (g (minus (Succ m') (Succ n)) [lt_p])
                                   by (join : cdiv_p (minus (Succ m') (Succ n)) = Nat)
                                   at h.h in
                    conv (Succ recg) by (join : Nat = cdiv_p m) at h.h
                   ) : ((m:Nat) -> ((m_minus_sn:Nat) -> [ltT (m_minus_sn) m] -> cdiv_p m_minus_sn) -> cdiv_p m))
       in conv (cov [cdiv_p] f m) by (join : cdiv_p m = Nat) at h.h

-- Tests
test_cdiv1 : cdiv 0 0 = 0
test_cdiv1 = join

test_cdiv2 : cdiv 1 0 = 1
test_cdiv2 = join

test_cdiv3 : cdiv 10 1 = 5
test_cdiv3 = join 1000

test_cdiv4 : cdiv 10 2 = 4
test_cdiv4 = join

test_cdiv5 : cdiv 10 3 = 3
test_cdiv5 = join

-- * Programmatic division and proofs it meets a specification
--   ---------------------------------------------------------

prog fdiv : Nat -> Nat -> Nat
rec fdiv m = \n . ((case (lt m n) [_] of
  True  -> Zero
  False -> Succ (fdiv (minus m n) n)) : Nat) -- this came up in getting fdiv_case to check ...
                                             -- not sure it's necessary

fdiv_case  : (m:Nat) -> (n:Nat) -> (b:Bool) -> [lt m n = b]
          -> (fdiv m n =
  ((case b [_] of
    True  -> Zero
    False -> Succ (fdiv (minus m n) n)) : Nat))
fdiv_case = \m n b [m_lt_n] .
  conv join
  by m_lt_n at b . (fdiv m n = ((case b [_] of
    True  -> Zero
    False -> Succ (fdiv (minus m n) n)) : Nat))

fdiv_caseT : (m:Nat) -> (n:Nat) -> [lt m n = True] -> fdiv m n = Zero
fdiv_caseT = \m n [m_lt_n] .
  conv (fdiv_case m n True [m_lt_n])
  by (join :   ((case True [_] of
    True  -> Zero
    False -> Succ (fdiv (minus m n) n)) : Nat) = Zero)
  at h . fdiv m n = h

fdiv_caseF : (m:Nat) -> (n:Nat) -> [lt m n = False] -> fdiv m n = Succ (fdiv (minus m n) n)
fdiv_caseF = \m n [m_lt_n] .
  conv (fdiv_case m n False [m_lt_n])
  by (join :   ((case False [_] of
    True  -> Zero
    False -> Succ (fdiv (minus m n) n)) : Nat) = Succ (fdiv (minus m n) n))
  at h . fdiv m n = h

-- poor man's logicality polymorphism

plusP : Nat => Nat => Nat
plusP = \m n . plus m n

multP : Nat => Nat => Nat
multP = \m n . mult m n

leP : Nat => Nat => Bool
leP = \m n . le m n

-- Trans is checked logically so (L P) value restriction kill this :P
transP : (aTy:Type 0) -> (bTy:Type 0) -> (cTy:Type 0) ->
         (a:aTy)      => (b:bTy)      => (c:cTy)      =>
         [a = b]      -> [b = c]      -> (a = c)
transP = \aTy bTy cTy a b c [a_eq_b] [b_eq_c] .
  conv join by (conv a_eq_b by b_eq_c at h.a=h) at h.a=h

fdiv_ub : (m:Nat) -> (n:Nat) -> leP (multP (fdiv m (Succ n)) (Succ n)) m = True

fdiv_ub_p : (m:Nat) -> Type 0
fdiv_ub_p = \m . (n:Nat) -> leP (multP (fdiv m (Succ n)) (Succ n)) m = True
fdiv_ub_p_red : (m:Nat) ->
    (fdiv_ub_p m
  = ((n:Nat) -> leP (multP (fdiv m (Succ n)) (Succ n)) m = True))
fdiv_ub_p_red = \m . join

fdiv_ub_f_base : (m:Nat) -> (n:Nat) -> [lt m (Succ n) = True]
              -> leP (multP (fdiv m (Succ n)) (Succ n)) m = True -- fdiv_ub_p m n
fdiv_ub_f_base = \m n [m_lt_Sn] .
  let    e1 [_] = (join : leP (multP Zero (Succ n)) m = True)
  in let e2 [_] = conv join
                  by (fdiv_caseT m (Succ n) [m_lt_Sn])
                  at h . (leP (multP (fdiv m (Succ n)) (Succ n)) m
                          = leP (multP h (Succ n)) m)

  in conv e2 by e1 at h. leP (multP (fdiv m (Succ n)) (Succ n)) m = h
{- LP value restiction kills this (the fdiv):

  in transP Bool Bool Bool
            (leP (multP (fdiv m (Succ n)) (Succ n)) m)
            (leP (multP Zero (Succ n)) Zero)
            True
            e1
            e2
-}

-- unsure about the plusP vs plus and minusP vs minus here ... need to prove these
axiom minus_plus_id : (m:Nat) => (n:Nat) => [lt m n = False] -> m = (plusP n (minus m n))
m_lt_n__Sm_lt_Sn' : (m : Nat) -> (n : Nat) -> lt m n = True -> lt (Succ m) (Succ n) = True
m_lt_n__Sm_lt_Sn' = \m n m_lt_n . conv (m_lt_n__Sm_lt_Sn m n
                                        (conv m_lt_n by (sg m n) at t.t))
                                  by (gs (Succ m) (Succ n))
                                  at t.t

plus_le : (m:Nat) -> (n:Nat) -> (k:Nat) -> leP (plusP k m) (plusP k n) = leP m n
plus_le = \m n . recnat plus_le k = case k [k_eq] of
  Zero    -> conv join by (sym Nat Nat k Zero k_eq)
             at k . leP (plusP k m) (plusP k n) = leP m n
  Succ k' -> let ih [_] = plus_le k' [k_eq]
             in let step [_] = (join : leP (plusP k' m) (plusP k' n)
                                     = leP (plusP (Succ k') m) (plusP (Succ k') n))
             in let step' [_] = conv step
                                by (sym Nat Nat k (Succ k') k_eq)
                                at k . leP (plusP k' m) (plusP k' n)
                                     = leP (plusP k m) (plusP k n)
             in conv ih by step' at h . h = leP m n

-- plus_le isn't directly applicable due to LP value restriction and
-- it can't prove the specializing via let because of the let-P-in-L
-- restriction :P
plus_le_P : (m:Nat) => (n:Nat) => (k:Nat) -> leP (plusP k m) (plusP k n) = leP m n
plus_le_P = \m n k . plus_le m n k

-- LP restriction trouble
-- ----------------------
{-
plus_le_specialized : (m:Nat) => (n:Nat) =>
  leP (plusP (Succ n) (multP (fdiv (minus m (Succ n)) (Succ n)) (Succ n)))
      (plusP (Succ n) (minus m (Succ n)))
  =
  leP (multP (fdiv (minus m (Succ n)) (Succ n)) (Succ n))
      (minus m (Succ n))
-}
-- LP value restriction proof
{-
plus_le_specialized = \m n .
  plus_le_P (multP (fdiv (minus m (Succ n)) (Succ n)) (Succ n))
            (minus m (Succ n))
            (Succ n)
-}
-- let-P-in-L proof
--
-- Results in:
--
--     Program variables can't be bound with let expressions in
--     Logical contexts because they would be normalized when the
--
-- Is this a concern here?  I.e., I'm producing an equality, and
-- equalities are already normalized (they're values by definition).
{-
plus_le_specialized = \m n . let prog d [d_eq] = (multP (fdiv (minus m (Succ n)) (Succ n)) (Succ n))
  in conv (plus_le_P d (minus m (Succ n)) (Succ n)) by d_eq at
     h . leP (plusP (Succ n) h) (plusP (Succ n) (minus m (Succ n))) = leP h (minus m (Succ n))
-}
-- For now I will attempt to adapt the proof of plus_le :P

plus_le_specialized : (m:Nat) -> (n:Nat) -> (k:Nat) ->
  leP (plusP k (multP (fdiv m n) n))
      (plusP k m)
  =
  leP (multP (fdiv m n) n)
      m
plus_le_specialized = \m n . recnat plus_le k = case k [k_eq] of
  Zero    -> conv join by (sym Nat Nat k Zero k_eq)
             at k . leP (plusP k (multP (fdiv m n) n))
                        (plusP k m)
                    =
                    leP (multP (fdiv m n) n)
                        m
  Succ k' -> let ih [_] = plus_le k' [k_eq]
             in let step [_] = (join : leP (plusP k' (multP (fdiv m n) n))
                                           (plusP k' m)
                                     = leP (plusP (Succ k') (multP (fdiv m n) n))
                                           (plusP (Succ k') m))
             in let step' [_] = conv step
                                by (sym Nat Nat k (Succ k') k_eq)
                                at k . leP (plusP k' (multP (fdiv m n) n))
                                           (plusP k' m)
                                     = leP (plusP k (multP (fdiv m n) n))
                                           (plusP k m)
             in conv ih by step' at h . h = leP (multP (fdiv m n) n) m

not_lt_S__pred : (m:Nat) => (n:Nat) => [lt m (Succ n) = False] -> m = Succ (pred m)
not_lt_S__pred = \m n [m_lt_n] . case m [m_eq] of
  Zero    -> let [e1] [_] = (conv m_lt_n by m_eq at m . lt m (Succ n) = False)
             in contra (conv e1 by (join : lt Zero (Succ n) = True) at h . h = False)
  -- need to do this more often: join's type can be inferred from the context
  Succ m' -> conv join by (sym Nat Nat m (Succ m') m_eq) at m . m = Succ (pred m)
-- this is just s_minus_s__lt specialized to ltT = lt
s_minus_s__lt' : (m:Nat) -> (n:Nat) -> lt (minus (Succ m) (Succ n)) (Succ m) = True
s_minus_s__lt' = \m n . conv (s_minus_s__lt m n)
                        by (gs (minus (Succ m) (Succ n)) (Succ m))
                        at t.t

fdiv_ub_f_step : (m:Nat) -> (n:Nat) -> [lt m (Succ n) = False]
              -> ((k:Nat) -> [lt k m = True] -> fdiv_ub_p k)
              -> leP (multP (fdiv m (Succ n)) (Succ n)) m = True -- fdiv_ub_p m n
fdiv_ub_f_step = \m n [m_lt_Sn] gm .
  let    e1 [_] = conv join by (fdiv_caseF m (Succ n) [m_lt_Sn])
                  at h . (leP (multP (fdiv m (Succ n)) (Succ n)) m
                          = leP (multP h (Succ n)) m)
  -- plusP works here even tho mult is defined in terms of plus ... they both reduce to plus
  in let e2 [_] = conv e1 by (join : (multP (Succ (fdiv (minus m (Succ n)) (Succ n))) (Succ n))
                                   = (plusP (Succ n) (multP (fdiv (minus m (Succ n)) (Succ n)) (Succ n))))
                  at h . leP (multP (fdiv m (Succ n)) (Succ n)) m
                       = leP h m
  in let e3 [_] = conv e2 by (minus_plus_id m (Succ n) [m_lt_Sn])
                  at h . leP (multP (fdiv m (Succ n)) (Succ n)) m
                       = leP (plusP (Succ n) (multP (fdiv (minus m (Succ n)) (Succ n)) (Succ n))) h
  {-
  -- (L P) value restriction here ... maybe I can specialize the lemma?
  in let e4 [_] = conv e3 by (plus_le (multP (fdiv (minus m (Succ n)) (Succ n)) (Succ n))
                                      (minus m (Succ n))
                                      (Succ n))
                  at h . leP (multP (fdiv m (Succ n)) (Succ n)) m
                       = h
  -}
  in let e4 [_] = conv e3 by (plus_le_specialized (minus m (Succ n)) (Succ n) (Succ n))
                  at h . leP (multP (fdiv m (Succ n)) (Succ n)) m
                       = h
  in let m_eq [_] = not_lt_S__pred m n [m_lt_Sn]
  in let m_eq' [_] = sym Nat Nat m (Succ (pred m)) m_eq
  in let e5 [_] = conv e4 by m_eq at h . leP (multP (fdiv m (Succ n)) (Succ n)) m
     = leP (multP (fdiv (minus h (Succ n)) (Succ n)) (Succ n)) (minus h (Succ n))
  in let ih1 [_] = gm (minus m (Succ n))
                     [conv (s_minus_s__lt' (pred m) n) by m_eq'
                      at m . lt (minus m (Succ n)) m = True]
  -- couldn't get fdiv_ub_p to join here, but introduce it as lemma
  -- fdiv_ub_p_red above worked ???
  in let ih2 [_] = conv ih1 by (fdiv_ub_p_red (minus m (Succ n))) at t.t
{-
                   by (join 1000: fdiv_ub_p (minus m (Succ n))
                            = ((k:Nat) -> leP (multP (fdiv (minus m (Succ n)) (Succ k)) (Succ k))
                                             (minus m (Succ n)) = True))

                   at t.t
-}
  in let ih [_] = ih2 n
  in conv e4 by ih at h . leP (multP (fdiv m (Succ n)) (Succ n)) m = h

fdiv_ub_f : (m:Nat) -> ((k:Nat) -> [lt k m = True] -> fdiv_ub_p k) -> fdiv_ub_p m


{-

-- is some approximation to this added to the context automatically?
fdiv_def : (m:Nat) -> (n:Nat) ->
  (fdiv m n = ((case (lt m n) [_] of
  True  -> Zero
  False -> let prog r [_] = (fdiv (minus m n) n) in -- value restriction!
           Succ r) : Nat))
fdiv_def = \_ _ . join

-- helper function version
prog fdiv_ub_lhs : Nat -> Nat -> Nat
fdiv_ub_lhs = \m n .
  let prog d [_] = fdiv m (Succ n) in
  mult d (Succ n)

fdiv_ub_lhs_def : (m:Nat) -> (n:Nat) ->
  (fdiv_ub_lhs m n =
    (let prog d [_] = fdiv m (Succ n) in
    mult d (Succ n)))
fdiv_ub_lhs_def = \_ _ . join

fdiv_ub_lhs_def_s1 : (m:Nat) -> (n:Nat) ->
    (let prog d [_] = fdiv m (Succ n) in
    mult d (Succ n))
    =
    (let prog d [_] = ((case (lt m (Succ n)) [_] of
         True  -> Zero
         False -> let prog r [_] = (fdiv (minus m (Succ n)) (Succ n)) in -- value restriction!
                  Succ r) : Nat)
    in mult d (Succ n))
fdiv_ub_lhs_def_s1 = \_ _ . join

fdiv_ub_lhs_def_s2 : (m:Nat) -> (n:Nat) -> (b:Bool) -> [lt m (Succ n) = b] ->
    (let prog d [_] = ((case (lt m (Succ n)) [_] of
         True  -> Zero
         False -> let prog r [_] = (fdiv (minus m (Succ n)) (Succ n)) in -- value restriction!
                  Succ r) : Nat)
    in mult d (Succ n))
    =
    (let prog d [_] = ((case b [_] of
         True  -> Zero
         False -> let prog r [_] = (fdiv (minus m (Succ n)) (Succ n)) in -- value restriction!
                  Succ r) : Nat)
    in mult d (Succ n))

fdiv_ub_lhs_def_s2 = \m n _ [m_lt_n] .
  conv join by m_lt_n at m_lt_n .
    (let prog d [_] = ((case (lt m (Succ n)) [_] of
         True  -> Zero
         False -> let prog r [_] = (fdiv (minus m (Succ n)) (Succ n)) in -- value restriction!
                  Succ r) : Nat)
    in mult d (Succ n))
    =
    (let prog d [_] = ((case m_lt_n [_] of
         True  -> Zero
         False -> let prog r [_] = (fdiv (minus m (Succ n)) (Succ n)) in -- value restriction!
                  Succ r) : Nat)
    in mult d (Succ n))

fdiv_ub_lhs_def_s3_base : (m:Nat) -> (n:Nat) ->
    (let prog d [_] = ((case True [_] of
         True  -> Zero
         False -> let prog r [_] = (fdiv (minus m (Succ n)) (Succ n)) in -- value restriction!
                  Succ r) : Nat)
    in mult d (Succ n))
    =
    Zero
fdiv_ub_lhs_def_s3_base = \_ _ . join

fdiv_ub_lhs_def_s3_step : (m:Nat) -> (n:Nat) ->
    (let prog d [_] = ((case False [_] of
         True  -> Zero
         False -> let prog r [_] = (fdiv (minus m (Succ n)) (Succ n)) in -- value restriction!
                  Succ r) : Nat)
    in mult d (Succ n))
    =
    (let prog d [_] =
                  let prog r [_] = (fdiv (minus m (Succ n)) (Succ n)) in -- value restriction!
                  Succ r
    in mult d (Succ n))
fdiv_ub_lhs_def_s3_step = \_ _ . join


fdiv_ub_lhs_def_s4_step : (m:Nat) -> (n:Nat) ->
    (let prog d [_] =
                  let prog r [_] = (fdiv (minus m (Succ n)) (Succ n)) in -- value restriction!
                  Succ r
    in mult d (Succ n))
    =
    (let prog r [_] =
                  (fdiv (minus m (Succ n)) (Succ n)) -- value restriction!
    in (mult (Succ r) (Succ n)))
fdiv_ub_lhs_def_s4_step = \m n . join


{-
fdiv_ub_lhs_base : (m:Nat) -> (n:Nat) -> [lt m n = True] ->
  (let prog d [_] = fdiv Zero (Succ n) in mult d (Succ n)) = Zero
fdiv_ub_lhs_base = \n . dummy
-}
fdiv_ub_lhs_base : (m:Nat) -> (n:Nat) -> [lt m n = True] -> (fdiv_ub_lhs m n = Zero)
fdiv_ub_lhs_base = \m n [m_lt_n] . dummy
--  let e0 [_] = (join : fdiv_ub_lhs_base m n = d


fdiv_ub_p : (m:Nat) -> Type 0
fdiv_ub_p = \m . (n:Nat)
              -> (let prog lhs [_] = fdiv_ub_lhs m n in
                  lt lhs (Succ m))
                  = True

-- idea : m < n so fdiv m (S n)
fdiv_ub_f_base : (m:Nat) -> (n:Nat) -> [lt m (Succ n) = True]
              -> fdiv_ub_p m
fdiv_ub_f_base = \m n [m_lt_n] . dummy

fdiv_ub_f : (m:Nat) -> ((k:Nat) -> [ltT k m] -> fdiv_ub_p k) -> fdiv_ub_p m
-- doesn't seem to work to annotate the \n . ... with fdiv_ub_p m.
-- try again when body is finished. (that is, it seems trellys can't
-- check that something has type fdiv_ub_p m for some reason)
fdiv_ub_f = \m g . (\n . case (lt m n) [m_lt_n] of
  True  -> let z_lt_Sm [_] = (join : lt Zero (Succ m) = True) in
           let fdiv_ub_lhs_eq_Z [_] =
             (join : (fdiv_ub_lhs m n =
                (let prog d [_] =
                case (lt m n) [_] of
                  True  -> Zero
                  False -> let prog r [_] = (fdiv (minus m n) n) in -- value restriction!
                           Succ r
                                        in mult d (Succ n)))) in
           fdiv_ub_lhs_eq_Z
  False -> Nat
                 : (n:Nat)
              -> (let prog lhs [_] = fdiv_ub_lhs m n in
                  lt lhs (Succ m))
                  = True)
{-
  ((\n . case (lt m n) [m_lt_n] of
           True -> Nat
           False -> Nat)
   : fdiv_ub_p m)
-}
fdiv_ub : (m:Nat) -> fdiv_ub_p m
fdiv_ub = cov [fdiv_ub_p] fdiv_ub_f

{-
-- fdiv specs
--
-- problems:
--
-- - fdiv is programmatic so i can't apply mult to its result
-- - i can't let bind the result of fdiv to make the result logical (see commented below)

{-
fdiv_upper_bound' : (m : Nat) -> (n : Nat)
                -> (let prog lhs [_] = (let prog m_fdiv_Sn [_] = (fdiv m (Succ n))
                                        in (mult m_fdiv_Sn (Succ n)))
                    in lt lhs (Succ m)) = True
-}

ltr : ((n:Nat) -> ((\x . plus x x = mult 2 x : Nat -> Type 0) n))
   -> ((n:Nat) -> (plus n n = mult 2 n))
ltr = \l n . conv (l n)
             by (join : (\x . plus x x = mult 2 x : Nat -> Type 0) n
                        = (plus n n = mult 2 n))
             at h.h

rtl : ((n:Nat) -> (plus n n = mult 2 n))
   -> ((n:Nat) -> ((\x . plus x x = mult 2 x : Nat -> Type 0) n))
rtl = \r n . conv (r n)
             by (join : (plus n n = mult 2 n)
                        = (\x . plus x x = mult 2 x : Nat -> Type 0) n)
             at h.h

{-
axiom f : Nat -> Type 0
axiom l : (n:Nat) -> ((\x . f x : Nat -> Type 0) n)
l' : (n:Nat) -> (f n)
l' = \n . conv (l n) by (join : (\x . f x : Nat -> Type 0) n = f n) at h.h
-}



fdiv_upper_bound' : (m : Nat) -> (n : Nat)
                -> (let prog m_fdiv_Sn [_] = (fdiv m (Succ n)) in
                    let prog lhs [_] = (mult m_fdiv_Sn (Succ n)) in
                    lt lhs (Succ m)) = True




fdiv_upper_bound'' : (m : Nat) -> (n : Nat)
                -> (d : Nat) => [d = fdiv m (Succ n)]
                -> ltT (mult d (Succ n))
                       (Succ m)

{-
fdiv_upper_bound'''' : (m : Nat) -> (n : Nat)
                -> (let prog m_fdiv_Sn [_] = (fdiv m (Succ n)) in
                    let prog lhs [_] = (mult m_fdiv_Sn (Succ n)) in
                    ltT lhs (Succ m))
-}

{-

mult' : Nat => Nat => Nat
mult' = \m n . mult m n

ltT' : Nat => Nat => Type 0
ltT' = \m n . ltT m n

-- prog will make this check, but a prog lemma is useless
prog fdiv_upper_bound' : (m : Nat) -> (n : Nat)
                -> (let prog lhs [_] = (let prog m_fdiv_Sn [_] = (fdiv m (Succ n))
                                        in (mult' m_fdiv_Sn (Succ n)))
                    in ltT' lhs (Succ m))
rec fdiv_upper_bound' m = fdiv_upper_bound' m -- :P


lt' : Nat => Nat => Bool
lt' = \m n . lt m n

id' : Nat => Nat
id' = \x . x

fdiv_upper_bound''' : (m : Nat) -> (n : Nat)
                -> (let prog lhs [_] = (let prog m_fdiv_Sn [_] = (fdiv m (Succ n))
                                        in (mult m_fdiv_Sn (Succ n)))
                    in ltT lhs (Succ m))


fdiv_upper_bound'' : (m : Nat) -> (n : Nat)
                -> (let prog lhs [_] = (let prog m_fdiv_Sn [_] = (fdiv m (Succ n))
                                        in (mult' m_fdiv_Sn (Succ n)))
                    in ltT' lhs (Succ m))


{-

id : Nat => Nat
recnat id n = case n [n_eq] of
  Zero    -> Zero
  Succ n' -> Succ (id n' [n_eq])

fdiv' : Nat => Nat => Nat
fdiv' = \m n . let prog r [_] = fdiv m n in r

fdiv_upper_bound : (m : Nat) -> (n : Nat) -> ltT (mult (fdiv' m (Succ n))
                                                       (Succ n))
                                                 (Succ m)





-- (m `fdiv` S n) * S n <= m
--
-- but I've written (<= m) as (< S m).

fdiv_upper_bound : (m : Nat) -> (n : Nat)
                -> (d : Nat) => [d = fdiv m (Succ n)]
                -> ltT (mult d (Succ n))
                       (Succ m)
{-
recnat fdiv_upper_bound m = \n d [d_eq] . case m [m_eq] of
  Zero    -> let
  Succ m' ->
-}

fdiv_upper_bound : (m : Nat) -> (n : Nat) -> ltT (mult' (fdiv m (Succ n))
                                                        (Succ n))
                                                 (Succ m)

{- This is a syntax error .Should it be?
fdiv_upper_bound : (m : Nat) -> (n : Nat) -> ltT (let m_fdiv_Sn [_] = (fdiv m (Succ n))
                                                  in  mult m_fdiv_Sn (Succ n))
                                                 (Succ m)
-}

fdiv_lower_bound : (m : Nat) -> (n : Nat) -> ltT m
                                                 (mult (Succ (fdiv m (Succ n)))
                                                       (Succ n))

-}
-}
-}
-}