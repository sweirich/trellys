module List where

-- A small module that demonstrates using the injectivity tactic.

data Nat : Type where
  Z : Nat
| S : Nat -> Nat



data Vec : [n:Nat][a:Type] -> Type where
  VNil : [p:n = Z] -> Vec n a
| VCons : [m:Nat] -> [p:n = S m] -> (x:a) -> (xs:Vec m a) -> Vec n a



data Fin : [limit:Nat] -> Type where
  FZ : [m:Nat] -> [p:limit = S m] -> Fin limit
| FS : [m:Nat] -> [p:limit = S m]-> Fin m -> Fin limit


Program pred : (x:Nat) -> Nat :=
   case x {x_eq} of  
     Z -> Z
   | S x' -> x'


Recursive idx : [b:Type][size:Nat](v:Vec size b)(i:Fin size) -> b:=
  case v {v_eq} of
   VNil [pl] -> abort b -- unreachable
  |VCons [mr] [pr] xr xsr -> 
     case i {i_eq} of
       FZ [mi] [pi] -> xr
     | FS [mi] [pi] fl -> let [u1] = equiv 1 : S mr = S mi;
                              [u6] = injective u1 : mr = mi
                           in idx [b] [mi] (autoconv xsr) fl

-- Dumbest refl ever...
Theorem dump_refl : forall(b:Type)(x:b). x = x :=
  let u1 = join 0 0 : (VCons [S Z] [b] [Z] [join 10 10] x (VNil [Z] [b] [join 0 0]) =
                       VCons [S Z] [b] [Z] [join 10 10] x (VNil [Z] [b] [join 0 0]))
  in injective u1

-- This doesn't work, because Vector is dependent, and the projection functions don't typecheck.
-- Theorem bar : forall(b:Type)(x:b). ((VNil [Z] [b] [join 0 0]) = (VNil [Z] [b] [join 0 0])) :=
--   let u1 = join 0 0 : (VCons [S Z] [b] [Z] [join 10 10] x (VNil [Z] [b] [join 0 0]) =
--                        VCons [S Z] [b] [Z] [join 10 10] x (VNil [Z] [b] [join 0 0]))
--   in injective u1

