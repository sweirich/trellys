module Vectors where

data Nat : Type where
  Z : Nat
| S : Nat -> Nat

data List : (a:Type) -> Type where
   Nil : List a
 | Cons : (x:a) -> (xs:List a) -> List a

data Vec : (a:Type)(n:Nat) -> Type where
   VNil : [p:n=Z] -> Vec a n
 | VCons : (size:Nat) -> [p:n = S size] ->
           (x:a) -> (xs:Vec a size) -> Vec a n

type plus : (x:Nat) -> (y:Nat) -> Nat
prog rec plus (x:Nat) = \(y:Nat) ->
    case x {x_eq} of
      Z -> y
    | S x' -> S (plus x' y)

type append : [b:Type] -> (l1:List b) -> (l2:List b)  -> List b
prog append = \[b:Type] (l1:List b) (l2:List b) ->
  ((rec app (l1':List b) .
    case l1' {l1'_eq} of
       Nil -> l2
     | Cons x xs -> Cons [b] x (app xs) ) : ( List b -> List b ) ) l1

theorem append_P : forall (b:Type) . (append [b] =
  ( (\ (l1:List b) (l2:List b) ->
     ((rec app (l1':List b) .
       case l1' {l1'_eq} of
          Nil -> l2
        | Cons x xs -> Cons b x (app xs) ) : ( List b -> List b ) ) l1 )
  : (l1:List b) -> (l2:List b) -> List b
     ) )
proof append_P = \(b:Type) => join 10 10


data Unit : Type where Ut : Unit


-- axiom undefined : forall (x:Type) . x
-- termcase syntax has all virtcal bars but case doesn't need for the first

theorem refl_ : forall (a:Type) (t:a) . t = t
proof refl_ = \(a:Type) (t:a) => refl


theorem append_assoc': forall (a:Type)
                              (l1:List a) (p:l1!) (l2:List a) (l3:List a) .
                   append a l1 (append a l2 l3) = append a (append a l1 l2) l3
proof append_assoc' = \(a:Type) =>
  ind ih (l1:List a) {p} . \ (l2:List a) (l3:List a) =>
    case l1 { l1_eq } p of
      Nil       -> let p1 [p1_eq] = conv join 100 100
                         at (append a ~l1_eq (append a l2 l3) = append a l2 l3)
                     ; p2 [p2_eq] = conv join 100 100
                         at (append a (append a ~l1_eq l2) l3 = append a l2 l3)
                   in trans p1 (sym p2)
    | Cons x xs -> let l1_ord [lq_ord_eq] = l1_eq
                     ; ih_xs [pf_xs_eq] = ih xs (ord l1_ord) l2 l3
                     ; r1 [r1_eq] = refl_ (List a) (append a l1 (append a l2 l3))
                     ; u1 [u1_eq] = conv r1 at (append a ~(sym l1_eq) (append a l2 l3)= append a l1 (append a l2 l3))
                     ; u2 [u2_eq] = join 1 0 :
    (Cons a x (append a xs (append a l2 l3))  =
     append a (Cons a x xs) (append a l2 l3))
                   in u2 Ut

theorem append_assoc : forall (a:Type) (l1:List a) (l2:List a) (l3:List a) .
                   append a l1 (append a l2 l3) = append a (append a l1 l2) l3
proof append_assoc = \(a:Type) (l1:List a) (l2:List a) (l3:List a) =>
  termcase l1 {l1term} of
      abort -> let u1 [u1_eq] = aborts (append a ~l1term (append a l2 l3))
                 ; u2 [u1_eq] = aborts (append a (append a ~l1term l2) l3)
               in trans (sym u1) u2
    | !     -> append_assoc a l1 l1term l2 l3



type reverse : (a:Type) -> (l:List a) -> List a
prog reverse = \ (a:Type) ->
   rec rev (l:List a) .
     case l { l_eq } of
       Nil -> Nil a
     | Cons x xs -> append a (rev xs) (Cons a x (Nil a))

type vcopy : (a:Type) -> (n:Nat) -> (l:Vec a n) -> (Vec a n)
prog rec vcopy (a:Type) (n:Nat) (l:Vec a n) =
  case l {l_eq} of
     VNil p -> VNil a n [p]
   | VCons size p x xs -> VCons a n size [p] x (vcopy a size xs)

type vapp : (a:Type) -> (m:Nat) -> (n:Nat) -> (v1:Vec a m) ->
     (v2:Vec a n) -> Vec a (plus m n)
prog rec vapp (a:Type) (m:Nat) (n:Nat)(v1:Vec a m)(v2:Vec a n) =
  case v1 {v1_eq} of
    VNil p ->  conv v2 at Vec a ~(morejoin {p} :  (n = plus m n))
  | VCons pred p x xs -> VCons a (plus m n) (plus pred n)
                            [(morejoin {p} : plus m n = S (plus pred n))]
                            x (vapp a pred n xs v2)

