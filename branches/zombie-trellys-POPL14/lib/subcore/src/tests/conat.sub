Set respect_strategies

Fix nat : * = 
        self n . ! C : (nat => *) . (! n : nat. (C (succ n))) -> (C zero) -> 
                   (C conv n to nat by refl, unfold) 
    ,
    zero : nat = 
         conv \ C : nat => * . \ s : (! n : nat. (C (succ n))) . \ z : (C zero) . z 
         to nat 
         by (! C : refl . (! s : refl . (! z : refl . (C unfold)))),
            [ unfold ; substself ]
           
    ,
    succ : nat -> nat = 
         \ n : nat . 
           conv \ C : nat => * . \ s : (! n : nat. (C (succ n))) . \ z : (C zero) . (s n) 
           to nat
           by ( ! C : refl . refl -> refl -> (C [ (unfold refl) ; eval ])) ,
              [ unfold ; substself ]

Define nat_elim : ! n : nat . 
                  ! C : (nat => *) . 
                  (! n : nat. (C (succ n))) -> 
                  (C zero) -> 
                  (C n) =
  \ n : nat .
  (conv n to ! C : (nat => *) . (! n : nat. (C (succ n))) -> (C zero) -> (C n) 
             by [ unfold ; substself ] , refl)

Fix conat : * = 
        self n . ! C :: (conat => *) . (! n :: conat. (C (cosucc n))) => (C cozero) => 
                   (C conv n to conat by refl, unfold) 
    ,
    cozero : conat = 
         conv \ C :: conat => * . \ s :: (! n :: conat. (C (cosucc n))) . \ z :: (C cozero) . z 
         to conat 
         by (! C :: refl . (! s :: refl . (! z :: refl . (C unfold)))),
            [ unfold ; substself ]
    ,
    cosucc : conat => conat = 
         \ n :: conat . 
           conv \ C :: conat => * . \ s :: (! n :: conat. (C (cosucc n))) . \ z :: (C cozero) . (s n) 
           to conat
           by ( ! C :: refl . refl => refl => (C [ (unfold refl) ; eval ])) ,
              [ unfold ; substself ]

Define conat_elim : ! n :: conat . 
                  ! C :: (conat => *) . 
                  (! n :: conat. (C (cosucc n))) => 
                  (C cozero) => 
                  (C n) =
  \ n :: conat .
  (conv n to ! C :: (conat => *) . (! n :: conat. (C (cosucc n))) => (C cozero) => (C n) 
             by [ unfold ; substself ] , refl)

Fix pred : conat -> conat =
  \ n : conat.
    conv
    (conat_elim n
       (\ x::conat. conat) # C
       (\ p :: conat . conv p to ((\ x::conat. conat) (cosucc p)) by refl , eval)
       (conv cozero to ((\ x::conat. conat) cozero) by refl , eval))
    to conat
    by eval , refl

Fix inf : conat = (cosucc inf)

Set suppress_lam_types

Eval inf

Eval (pred inf)

Eval (pred (cosucc cozero))
