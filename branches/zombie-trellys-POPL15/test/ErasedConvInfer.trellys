-- The same examples as ErasedConv, but asking the elaborator to infer the proofs.
module ErasedConvInfer where

import Prelude
import Arithmetic

prog zero : Nat
zero = 0

axiom log atype : Type 0
axiom a : atype

axiom btype : Type 0
axiom b : btype

axiom f : Nat -> [t:Type 0 @log] -> (t@log) -> Nat

axiom x : Nat

q : f x [atype] = f x [btype]
q = join


easy_goal : (a=b) -> (f x [atype] a) = (f x [btype] b)
easy_goal p = _
--easy_goal = conv (join : f x [atype] a = f x [atype] a)
--					      by q, p at g v . f x [atype] a = g v

goal : (a=b) -> ((\x . f x [atype] a) : Nat -> Nat) = ((\x . f x [btype] b) : Nat -> Nat)
goal p = _
--goal p =  conv (join : ((\x. f x [atype] a) : Nat -> Nat) = ((\x. f x [atype] a) : Nat -> Nat))
--		    by [atype = btype], p
--        at t1 t2  . ((\x. f x [atype] a) : Nat -> Nat) = ((\x. f x [t1] t2) : Nat -> Nat)
