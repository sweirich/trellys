-- This module tests that the automatic congruence closure algorithm is
-- handling injectivity of datatype constructors.

module InjectivityTests where

import Prelude

data T (x : Nat) (y : Nat) : Type where
  t of

-- Injectivity of datatype constructors:

test_tcon1 : (T 0 0 = T 0 1) -> (0 = 1)
test_tcon1 h = _ 

test_tcon2 : (x:Nat) -> (y:Nat) -> (T x 0 = T y 0) -> (x = y)
test_tcon2 x y h = _ 

-- Injectivity of the @.

test_at1 : (T1 : Type) -> (T2 : Type) -> ((T1@log) = (T2@log)) -> (T1=T2)
test_at1 T1 T2 h = _


-- What if there are more than two expressions headed by injective constructors
-- in a congruence class?

test_many_at1 : (T1 : Type) -> (T2 : Type) -> (T3 : Type) ->
	        ((T1@log) = (T2@log)) -> ((T1@log) = (T3@log)) 
		-> (T1=T2)
test_many_at1 T1 T2 T3 h1 h2 = _

test_many_at2 : (T1 : Type) -> (T2 : Type) -> (T3 : Type) ->
	        ((T1@log) = (T2@log)) -> ((T2@log) = (T3@log)) 
		-> (T1=T3)
test_many_at2 T1 T2 T3 h1 h2 = _


-- Injectivity of _data_ constructors 

-- Simple values.
test_succ_val : (n:Nat) -> (m:Nat) -> (Succ n = Succ m) -> n = m
test_succ_val n m h = _


plus : Nat -> Nat -> Nat
ind plus n = \m .
  case n [cw] of
    Zero -> m
    Succ pred -> Succ (plus pred [ord cw] m)

-- Logical expressions
test_succ_plus : (n:Nat) -> (m:Nat) -> (Succ (plus n n) = Succ (plus m m)) -> (plus n n)  = (plus m m)
test_succ_plus n m h = _
