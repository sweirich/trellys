data String :: Type 0 where
Empstr :: String
| Str0 :: Pi x:+ String.String
| Str1 :: Pi x:+ String.String. 

data Bool :: Type 0 where
 False :: Bool
| True :: Bool. 

data Term :: Type 0 where
Var :: Pi x:+String.Term
|App :: Pi x:+Term.Pi y:+ Term. Term
|Lambdabs :: Pi x:+String.Pi y:+ Term. Term.

data MaybeStep :: Type 0 where
CntStep :: MaybeStep
|Step :: Pi x:+Term. MaybeStep. 

data Context :: Type 0 where
Base :: Context
| Ct :: Pi x:+Context.Pi y:+ Term. Context
| VC :: Pi x:+Term.Pi y:+ Context. Context. 

data RedexT :: Type 0 where
  Redex :: Pi x:+Term. Pi y:+String.Pi z:+ Term. RedexT.

data Decomp :: Type 0 where
   Deco :: Pi x:+Context.Pi y:+RedexT.Decomp 
 | CntDeco :: Decomp .

and :: Pi b:+Bool. Pi b2:+ Bool. Bool.

and := \(b:+ Bool).\(b2:+ Bool).
     case b of
      True -> b2
    | False -> False. 

isLambda :: Pi x:+Term. Bool.

isLambda := \(l:+Term).
   case l of 
     Lambdabs l' t' -> True
    |App l' t' -> False
    |Var l' -> False.

islegalcxt :: Pi x:+Context. Bool.

islegalcxt := rec t legalcxt: (Pi x:+Context. Bool).
     case t of
     Base -> True
    |Ct p' r' -> legalcxt p'
    |VC p' r'-> and (isLambda p')
                 (legalcxt r').

data UnitT :: Type 0 where
  Unit :: UnitT .


recdecompose :: Pi x:+Term. Decomp.

recdecompose := rec t decompose: (Pi x:+Term. Decomp).
  case t of 
    Var t' -> CntDeco 
  | Lambdabs t' r' -> CntDeco 
  | App t1 t2 -> 
      case (isLambda t2) of
         True ->
          (case t1  of 
             Var s -> CntDeco
           | App t1' t1'' -> (decompose t1)
           | Lambdabs x t1' ->
               Deco Base (Redex t2 x t1'))
         |False-> 
            case(decompose t1) of
                  CntDeco-> 
                    (case(decompose t2) of
                       CntDeco-> CntDeco
                      |Deco cxt r -> Deco(VC t1 cxt) r)
                 |Deco cxt r -> Deco(Ct cxt t2) r .

recplug :: Pi x:+Context. Pi y:+Term.Term.
recplug := rec c plug:(Pi x:+Context. Pi y:+Term.Term). \(t:+Term).
    case c of
               Base-> t
               |Ct c' t'->  App (plug c' t) t'               
               |VC v c' ->   App v (plug  c' t).

receq_str :: Pi x:+String. Pi y:+ String. Bool.

receq_str := rec t eq_str: (Pi x:+String. Pi y:+ String. Bool). \ (s:+String).
  case t of
    Empstr -> (case s  of
            Empstr -> True
          | Str0 s' -> False
          | Str1 s' -> False)
    | Str0 t' -> (case s of  
            Empstr -> False
           |Str0 s'-> (eq_str t' s') 
           |Str1 s' -> False)
    | Str1 t' -> (case s of  
            Empstr -> False
           |Str0 s' -> False 
           |Str1 s' -> (eq_str t' s')) .

recsubstitute :: Pi x:+Term .Pi y:+ String. Pi z:+ Term.Term.

recsubstitute := rec t substitute: (Pi x:+Term .Pi y:+ String. Pi z:+ Term.Term). \(s:+String). \(t1:+ Term).
          case t1 of 
                   Var x' -> (case receq_str s x' of
                           True -> t
                          |False -> t1)
                 |Lambdabs s' t' ->  (case (receq_str s s')  of
                           True -> t1
                          |False -> Lambdabs s' (substitute t s t') )
                 |App t2 t3 -> App (substitute t s t2)
                                   (substitute t s t3) .

step :: Pi x:+Term. MaybeStep.

step := \(t:+Term).
    case (recdecompose t) of
         Deco c t1->( case t1 of
                    Redex t2 x t3 -> Step (recplug c (recsubstitute t2 x t3)))  
       | CntDeco-> CntStep  .



recreduce :: Pi x:+Term. Term. 
recreduce := rec t reduce: (Pi x:+Term. Term).
   case step t of
     CntStep-> t
    |Step t1-> reduce t1 .


$substitute_test1 :: {recsubstitute (Var(Str1 Empstr)) (Str0 Empstr)  (Lambdabs Empstr (Var (Str0 Empstr))),(Lambdabs Empstr(Var(Str1 Empstr)))}.
$substitute_test1 :=  [recsubstitute (Var(Str1 Empstr)) (Str0 Empstr)  (Lambdabs Empstr (Var (Str0 Empstr))),(Lambdabs Empstr(Var(Str1 Empstr)))].


$reduce_test1 :: {recreduce (App (Lambdabs( Str0 Empstr)
 (App(Var (Str0 Empstr))(Var(Str0 Empstr))))(Lambdabs (Str1 Empstr)(Var (Str1 Empstr)))), (Lambdabs( Str1 Empstr)( Var (Str1 Empstr))) }.

 $reduce_test1 := [recreduce (App (Lambdabs( Str0 Empstr)
 (App(Var (Str0 Empstr))(Var(Str0 Empstr))))(Lambdabs (Str1 Empstr)(Var (Str1 Empstr)))), (Lambdabs( Str1 Empstr)( Var (Str1 Empstr))) ].













