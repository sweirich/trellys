Fix 
trm : * =
  self n. 
   ! C : (trm => *). 
   (! t1 : trm. ! t2 : trm . (C (app t1 t2))) ->
   (! t1 : (trm -> trm) . (C (lam t1))) ->
   (C conv n to trm by refl , unfold) ,
app : trm -> trm -> trm = 
  \ t1 : trm . \ t2 : trm.
  conv
    \ C : (trm => *).
    \ a : (! t1 : trm. ! t2 : trm . (C (app t1 t2))) .
    \ l : (! t1 : (trm -> trm) . (C (lam t1))) .
      (a t1 t2)
  to trm
  by (! C : refl . refl -> refl -> 
        (C [ (unfold refl refl) ; eval])),
     [unfold; substself],
lam : (trm -> trm) -> trm = 
  \ n : (trm -> trm).
  conv
  \ C : (trm => *).
   \ a : (! t1 : trm. ! t2 : trm . (C (app t1 t2))) .
   \ l : (! t1 : (trm -> trm) . (C (lam t1))) .
    (l n)
  to trm
  by (! C : refl . refl -> refl -> 
        (C [ (unfold refl) ; eval])),
     [unfold; substself]

Define trm_elim : 
   ! t : trm.
   ! C : (trm => *). 
   (! t1 : trm. ! t2 : trm . (C (app t1 t2))) ->
   (! t1 : (trm -> trm) . (C (lam t1))) ->
   (C t) =
  \ t : trm.
  conv t 
  to ! C : (trm => *). 
   (! t1 : trm. ! t2 : trm . (C (app t1 t2))) ->
   (! t1 : (trm -> trm) . (C (lam t1))) ->
   (C t)
  by [ unfold ; substself ] , refl

Fix trmfun : * = trm -> trmfun

Fix interp : trm -> trmfun =
  \ t : trm . 
  conv
  (trm_elim t
    (\ x :: trm . trmfun)
    (\ t1 : trm . \ t2 : trm.
      conv
      ((conv (interp t1) to trm -> trmfun by unfold , refl) t2)
      to ((\ x :: trm . trmfun) (app t1 t2))
      by refl , eval)
    (\ t1 : (trm -> trm) . 
       conv
         \ x : trm .
           (interp (t1 x))
       to ((\ x :: trm . trmfun) (lam t1)) by refl , [ eval ; unfold ] ))
    to trmfun
    by eval , refl

Fix eq : ! A : *. A => A => * = 
         \ A : * . \ a :: A . \ b :: A . 
           self p. ! C : (! b :: A . (eq A a b) => *) .
           (C a (eqrefl A a)) ->
           (C b conv p to (eq A a b) by refl , [ (unfold A a b) ; eval ] )
      ,
      eqrefl : ! A : * . ! a :: A . (eq A a a) = 
         \ A : * . \ a :: A .
         conv
         \ C : (! b :: A. (eq A a b) => *) .
         \ p : (C a (eqrefl A a)). p
         to (eq A a a)
         by (! C : refl . ! p : refl . (C a [ (unfold A a) ; eval ])) , [ (unfold A a a) ; eval ; substself ]

Define test : trm = (app (lam (\x:trm. (app x x))) (lam (\y:trm.y)))

Define result : trmfun = conv (\x:trm.(interp x)) to trmfun by refl , unfold

Define lemma : (eq trmfun (interp test) result) =
  conv (eqrefl trmfun (interp test))
  to (eq trmfun (interp test) result)
  by (eq trmfun refl [eval<unfold>; (\x:trm.(refl eval))]) , 
     (eq trmfun refl unfold)