module Vectors where

data Nat : Type where
  Z : Nat
| S : Nat -> Nat


data List : (a:Type) -> Type where
   Nil : List a
 | Cons : (x:a) -> (xs:List a) -> List a


data Vec : (a:Type)(n:Nat) -> Type where
   VNil : (p:n=Z) -> Vec a n
 | VCons : (size:Nat) -> (p:n = S size) ->
           (x:a) -> (xs:Vec a size) -> Vec a n


type append : (b:Type) -> (l1:List b) -> (l2:List b)  -> List b
prog append = \(b:Type) ->
   (rec app (l1:List b) . \ (l2:List b) ->
	    case l1 {l1_eq} of
        Nil -> l2
      | Cons x xs -> Cons b x (app xs l2))


type reverse : (a:Type) -> (l:List a) -> List a
prog reverse = \ (a:Type) ->
   rec rev (l:List a) .
      case l { l_eq } of
       Nil -> Nil a
     | Cons x xs -> append a (rev xs) (Cons a x (Nil a))

type vcopy : (a:Type) -> (n:Nat) -> (l:Vec a n) -> (Vec a n)
prog vcopy = \(a:Type) (n:Nat) ->
		 rec copy (l:Vec a n) .
		   case l {l_eq} of
         VNil p -> VNil a n p
			 | VCons size p x xs ->  VCons a n size p x (copy xs)
