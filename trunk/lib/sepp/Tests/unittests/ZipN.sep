module ZipN where

data Nat : Type where
  Z : Nat
| S : Nat -> Nat

data List : (a:Type) -> Type where
   Nil : List a
 | Cons : (x:a) -> (xs:List a) -> List a

type map : (a:Type) -> (b:Type) -> (f:a -> b) -> (l:List a) -> List b
prog map = \(a:Type)(b:Type)(f:a -> b) -> rec map(l:List a) .
  case l { l_eq } of
    Nil -> (Nil b)
  | Cons x l' -> (Cons b (f x) (map l'))

--- funtp [ t1 , ... , tn ] t = t1 -> ... -> tn -> t

type funtp : List Type -> Type -> Type
prog rec funtp (ts:List Type) = 
  \(ret:Type) ->
   case ts { ts_eq } of
     Nil -> ret
   | Cons t ts' -> t -> funtp ts' ret

data Vec : (a:Type)(n:Nat) -> Type where
   VNil : [p:n=Z] -> Vec a n
 | VCons : (size:Nat) -> [p:n = S size] ->
           (x:a) -> (xs:Vec a size) -> Vec a n

type zipn_t : Type
prog zipn_t =
  (ts:List Type) -> (ret:Type) -> 
  (f:funtp ts ret) -> 
  [n:Nat] ->
   funtp (map Type Type (\(x:Type) -> Vec x n) ts) (Vec ret n)


{-
type zipn :
  (ts:List Type) -> (ret:Type) -> 
  (f:funtp ts ret) -> 
  [n:Nat] ->
   funtp (map Type Type (\(x:Type) -> Vec x n) ts) (Vec ret n)
prog zipn = 
  \ (ts:List Type)(ret:Type)
    (f:funtp ts ret) ->
  -}