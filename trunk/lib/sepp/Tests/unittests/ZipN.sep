module ZipN where

data Nat : Type where
  Z : Nat
| S : Nat -> Nat

data Vec : (a:Type)(n:Nat) -> Type where
   VNil : [p:n=Z] -> Vec a n
 | VCons : (size:Nat) -> [p:n = S size] ->
           (x:a) -> (xs:Vec a size) -> Vec a n

type vmap : [a:Type] -> [b:Type] -> (f:a -> b) -> (n:Nat) -> (l:Vec a n) -> Vec b n
prog vmap = \[a:Type][b:Type](f:a -> b) -> rec vmap(n:Nat)(l:Vec a n) .
  case l { l_eq } of
    VNil n_eq -> (VNil [b] [n] [n_eq])
  | VCons sz n_eq x l' -> (VCons [b] [n] sz [n_eq] (f x) (vmap sz l'))

--- funtp [ t1 , ... , tn ] t = t1 -> ... -> tn -> t

type funtp : (n:Nat) -> Vec Type n -> Type -> Type
prog rec funtp (n:Nat)(ts:Vec Type n) =
  \(ret:Type) ->
   case ts { ts_eq } of
     VNil n_eq -> ret
   | VCons sz n_eq t ts' -> t -> funtp sz ts' ret


type zipn_t : Type
prog zipn_t =
  (n:Nat) -> (ts:Vec Type n) -> (ret:Type) ->
  (f:funtp n ts ret) ->
   funtp n (vmap [Type] [Type] (\(x:Type) -> Vec x n) n ts) (Vec ret n)

type zipn :
  (n:Nat) -> (ts:Vec Type n) -> (ret:Type) ->
  (f:funtp n ts ret) ->
   funtp n (vmap [Type] [Type] (\(x:Type) -> Vec x n) n ts) (Vec ret n)
prog rec zipn(n:Nat)(ts:Vec Type n) =
  \ (ret:Type)
    (f:funtp n ts ret) ->
  case ts { ts_eq } of
    VNil n_eq -> conv f at ~(morejoin { sym ts_eq } : funtp n ts ret = ret)
  | VCons sz n_eq t ts' -> sz
