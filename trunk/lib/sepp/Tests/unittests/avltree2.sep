module Avltree where

data Nat : Type where
  Z : Nat
| S : Nat -> Nat

data Bool : Type where
 True : Bool
| False : Bool

Program pred : (a:Nat) -> Nat := 
 case a {a_eq} of
     Z -> Z
   | S n -> n

Recursive eq : (a:Nat)(b:Nat) -> Bool :=
 case a {a_eq} of
      Z -> (case b {b_eq} of
                Z -> True
              | S q -> False)
    | S p -> (case b {b_eq} of
                Z -> False
              | S q -> eq p q)

infixr 5 >=

Recursive (>=) : (a:Nat)(b:Nat) -> Bool :=
  case a {a_eq}  of
    Z -> (case b {b_eq} of
              Z -> True
             | S b' -> False)
   |S a' -> case b {b_eq} of
              Z -> True
             |S b' -> a' >= b'

data Balance : (hL:Nat) (hR:Nat) (hMax:Nat) -> Type where
   Less : [u:hR = (S hL)] -> [v:hMax = hR] -> Balance hL hR hMax
 | Same : [u:hR = hL] -> [v:hMax = hR] -> Balance hL hR hMax
 | More : [u:hL = (S hR)] -> [v:hMax = hL] -> Balance hL hR hMax

data Avl : (h:Nat) -> Type where
  Leaf :[u:h = Z] -> Avl h
| Node : (hL:Nat)-> (hR:Nat)->(hMax:Nat)->(b:Balance hL hR hMax)
         -> [p : h = (S hMax)]-> (trl : Avl hL)
         -> (trr: Avl hR) -> (d:Nat) 
         -> Avl h

data Or : (a : Type) (b : Type) -> Type where
  Left : (x : a) -> Or a b
| Right : (x : b) -> Or a b

-- Number of lines for rotateRight: 130 
Program rotateRight : (y: Nat) (n : Nat) (tr1: Avl (S (S n)))(tr2: Avl n) -> (Or (Avl (S (S n))) (Avl (S (S (S n)))) ) := 
 case tr1 {tr1_eq} of
    Leaf [p] -> abort (Or (Avl (S (S n))) (Avl (S (S (S n)))))
  | Node tr1_hL tr1_hR tr1_hMax tr1_bal [p] tr1_l tr1_r a ->
-- Here p: S (S n) = S tr1_hMax, u : tr1_hR = S tr1_hL, v : tr1_hMax = tr1_hR
        case tr1_bal {tr1_bal_eq} of 
             Less [u] [v] -> (case tr1_r {tr1_r} of
                                 Leaf [p'] ->  abort (Or (Avl (S (S n))) (Avl (S (S (S n)))))
-- Here p'' : tr1_hR = S tr1_r_hMax, r: tr1_r_hR = tr1_r_hL, s: tr1_r_hMax = tr1_r_hR 
                               | Node tr1_r_hL tr1_r_hR tr1_r_hMax tr1_r_bal [p''] tr1_r_l tr1_r_r b -> 
                                       (case tr1_r_bal {tr1_r_bal} of
                                             Same [r] [s] -> 
                                             let p1 = join 100 100 : tr1_r_hL = pred (S tr1_r_hL);
                                                 p2 = sym (trans s r) : tr1_r_hL = tr1_r_hMax; 
                                                 p3 = conv p1 by p2 at x.(tr1_r_hL = pred (S x)); -- tr1_r_hL = pred (S tr1_r_hMax)
                                                 p4 = conv p3 by (sym p'') at x.(tr1_r_hL = pred x); -- tr1_r_hL = pred tr1_hR
                                                 p5 = conv p4 by u at x.(tr1_r_hL = pred x);--tr1_r_hL = pred (S tr1_hL)
                                                 p6 = join 100 100 : pred (S tr1_hL) = tr1_hL;
                                                 p7 = trans p5 p6; -- tr1_r_hL = tr1_hL
                                                 p8 = conv (join 1 1: S tr1_hL = S tr1_hL) by (sym p7) at x.(S tr1_hL = S x);
                                                 p9 = trans r p7; -- tr1_r_hR = tr1_hL 
                                                 p10 = join 100 100: n = pred (pred (S (S n)));
                                                 p11 = conv p10 by p at x.(n = pred (pred x));
                                                 p12 = conv p11 by v at x.(n = pred (pred (S x)));
                                                 p13 = conv p12 by u at x. (n = pred (pred (S x)));
                                                 p14 = join 100 100: (pred (pred (S (S tr1_hL)))) = tr1_hL;
                                                 p15 = trans p13 p14 -- n = tr1_hL
                                             in 
                                                 Left (Avl (S (S n))) (Avl (S (S (S n))))
                                                (Node (S (S n)) (S tr1_hL) (S tr1_hL) (S tr1_hL) 
                                                (Same (S tr1_hL) (S tr1_hL) (S tr1_hL) [join 1 1] [join 1 1]) 
                                                [conv (conv p by v at x.(S (S n) = S x)) by u at x.(S (S n) = S x)] 
                                                (Node (S tr1_hL) tr1_hL tr1_r_hL tr1_r_hL 
                                                (Same tr1_hL tr1_r_hL tr1_r_hL [p7][join 1 1])
                                                [p8] tr1_l  tr1_r_l a)
                                                (Node (S tr1_hL) tr1_hL tr1_hL tr1_hL 
                                                (Same tr1_hL tr1_hL tr1_hL [join 1 1] [join 1 1])
                                                [join 1 1] (conv tr1_r_r by p9 at x.(Avl x)) (conv tr2 by p15 at x.(Avl x)) y) b)

-- Here p: S (S n) = S tr1_hMax, u : tr1_hR = S tr1_hL, v : tr1_hMax = tr1_hR
-- Here p'' : tr1_hR = S tr1_r_hMax, r: tr1_r_hR = S tr1_r_hL, s: tr1_r_hMax = tr1_r_hR 
                                           | Less [r] [s] -> 
                                             let p1 = conv p'' by s at x.(tr1_hR = S x);
                                                 p2 = conv p1 by r at x.(tr1_hR = S x);-- tr1_hR = S (S tr1_r_hL) 
                                                 p3 = trans (sym u) p2; -- S tr1_hL = S (S tr1_r_hL)
                                                 p4 = join 100 100: tr1_hL = pred (S tr1_hL); 
                                                 p5 = join 100 100: pred (S (S tr1_r_hL)) = S tr1_r_hL;
                                                 p6 = conv p4 by p3 at x.(tr1_hL = pred x); -- tr1_hL = pred (S (S tr1_r_hL)) 
                                                 p7 = trans p6 p5; -- tr1_hL = S tr1_r_hL  
                                                 p8 = trans r (sym p7); -- tr1_r_hR = tr1_hL 
                                                 p10 = join 100 100: n = pred (pred (S (S n)));
                                                 p11 = conv p10 by p at x.(n = pred (pred x));
                                                 p12 = conv p11 by v at x.(n = pred (pred (S x)));
                                                 p13 = conv p12 by u at x. (n = pred (pred (S x)));
                                                 p14 = join 100 100: (pred (pred (S (S tr1_hL)))) = tr1_hL;
                                                 p15 = trans p13 p14 -- n = tr1_hL 
                                             in 
                                                 Left (Avl (S (S n))) (Avl (S (S (S n))))
                                                (Node (S (S n)) (S tr1_hL) (S tr1_hL) (S tr1_hL) 
                                                (Same (S tr1_hL) (S tr1_hL) (S tr1_hL) [join 1 1] [join 1 1]) 
                                                [conv (conv p by v at x.(S (S n) = S x)) by u at x.(S (S n) = S x)] 
                                                (Node (S tr1_hL) tr1_hL tr1_r_hL tr1_hL 
                                                (More tr1_hL tr1_r_hL tr1_hL [p7][join 1 1])
                                                [join 1 1] tr1_l  tr1_r_l a)
                                                (Node (S tr1_hL) tr1_hL tr1_hL tr1_hL 
                                                (Same tr1_hL tr1_hL tr1_hL [join 1 1] [join 1 1])
                                                [join 1 1]  (conv tr1_r_r by p8 at x.(Avl x)) (conv tr2 by p15 at x.(Avl x)) y) b)

-- Here p: S (S n) = S tr1_hMax, u : tr1_hR = S tr1_hL, v : tr1_hMax = tr1_hR
-- Here p'' : tr1_hR = S tr1_r_hMax, r: tr1_r_hL = S tr1_r_hR, s: tr1_r_hMax = tr1_r_hL 

                                           | More [r] [s] -> 
                                             let p1 = join 100 100 : tr1_r_hL = pred (S tr1_r_hL);
                                                 p2 = sym s : tr1_r_hL = tr1_r_hMax; 
                                                 p3 = conv p1 by p2 at x.(tr1_r_hL = pred (S x)); -- tr1_r_hL = pred (S tr1_r_hMax)
                                                 p4 = conv p3 by (sym p'') at x.(tr1_r_hL = pred x); -- tr1_r_hL = pred tr1_hR
                                                 p5 = conv p4 by u at x.(tr1_r_hL = pred x);--tr1_r_hL = pred (S tr1_hL)
                                                 p6 = join 100 100 : pred (S tr1_hL) = tr1_hL;
                                                 p7 = trans p5 p6; -- tr1_r_hL = tr1_hL
                                                 p8 = trans (sym p7) r;  -- tr1_hL = S tr1_r_hR 
                                                 p10 = join 100 100: n = pred (pred (S (S n)));
                                                 p11 = conv p10 by p at x.(n = pred (pred x));
                                                 p12 = conv p11 by v at x.(n = pred (pred (S x)));
                                                 p13 = conv p12 by u at x. (n = pred (pred (S x)));
                                                 p14 = join 100 100: (pred (pred (S (S tr1_hL)))) = tr1_hL;
                                                 p15 = trans p13 p14 -- n = tr1_hL 
                                             in 
                                                 Left (Avl (S (S n))) (Avl (S (S (S n))))
                                                (Node (S (S n)) (S tr1_hL) (S tr1_hL) (S tr1_hL) 
                                                (Same (S tr1_hL) (S tr1_hL) (S tr1_hL) [join 1 1] [join 1 1]) 
                                                [conv (conv p by v at x.(S (S n) = S x)) by u at x.(S (S n) = S x)] 
                                                (Node (S tr1_hL) tr1_hL tr1_hL tr1_hL 
                                                (Same tr1_hL tr1_hL tr1_hL [join 1 1][join 1 1])
                                                [join 1 1] tr1_l  (conv tr1_r_l by p7 at x.(Avl x)) a)
                                                (Node (S tr1_hL) tr1_r_hR tr1_hL tr1_hL 
                                                (Less tr1_r_hR tr1_hL tr1_hL [p8] [join 1 1])
                                                [join 1 1]  tr1_r_r  (conv tr2 by p15 at x.(Avl x))  y) b)
                                                                                         ))
-- Here p: S (S n) = S tr1_hMax, u : tr1_hR = tr1_hL, v : tr1_hMax = tr1_hR

          | Same [u] [v] -> 
              let p1 = join 1 1 : S (S (S n)) = S (S (S n));
                  p2 = conv p1 by p at x.(S (S (S n)) = S x); -- S (S (S n)) = S (S tr1_hMax)
                  p3 = conv p2 by v at x.(S (S (S n)) = S (S x)); 
                  p4 = conv p3 by u at x.(S (S (S n)) = S (S x)); -- S S S n = S S tr1_hL
                  p5 = join 100 100: S n = pred (S (S n));
                  p6 = conv p5 by p at x.(S n = pred x); -- S n = pred (S tr1_hMax)
                  p7 = conv p6 by v at x.(S n = pred (S x)); -- S n = pred S tr1_hR
                  p8 = join 100 100: pred (S tr1_hR) = tr1_hR;
                  p9 = sym (trans p7 p8); -- tr1_hR = S n
                  p10 = join 1 1: S tr1_hL = S tr1_hL;
                  p11 = conv p10 by sym u at x.(S tr1_hL = S x)
              in 
               Right (Avl (S (S n))) (Avl (S (S (S n))))
              (Node (S (S (S n))) tr1_hL (S tr1_hL) (S tr1_hL) (Less tr1_hL (S tr1_hL) (S tr1_hL) [join 1 1][join 1 1])
              [p4] tr1_l (Node (S tr1_hL) tr1_hR n tr1_hR (More tr1_hR n tr1_hR [p9][join 1 1]) [p11] tr1_r tr2 y) a)

-- Here p: S (S n) = S tr1_hMax, u : tr1_hL = S tr1_hR, v : tr1_hMax = tr1_hL

          | More [u] [v] -> 
              let p1 = conv p by v at x.(S (S n)= S x); -- S S n = S tr1_hL 
                  p2 = conv p1 by u at x. (S (S n) = S x); -- (S (S n)) = S (S tr1_hR)
                  p3 = join 100 100 : n = pred (pred (S (S n))) ;
                  p4 = conv p3 by p2 at x.(n = pred (pred x)); -- n = pred pred S S tr1_hR
                  p5 = join 100 100: pred (pred (S (S tr1_hR))) = tr1_hR;
                  p6 = trans p4 p5; -- n = tr1_hR
                  p7 = conv u by (sym p6) at x.(tr1_hL = S x)
              in 
               Left (Avl (S (S n))) (Avl (S (S (S n))))
              (Node (S (S n)) tr1_hL tr1_hL tr1_hL  (Same tr1_hL tr1_hL tr1_hL  [join 1 1][join 1 1])
              [p1] tr1_l (Node tr1_hL tr1_hR n n (Same tr1_hR n n [p6] [join 1 1]) [p7] tr1_r tr2 y) a)

-- Number of lines for defining rotateLeft: 15

Program flip : (hL:Nat)(hR:Nat)(hMax:Nat) (bal : Balance hL hR hMax) -> Balance hR hL hMax :=
 case bal {bal_eq} of
   Less [u][v] -> More hR hL hMax [u][v]
 |  More [u][v] -> Less hR hL hMax [u][v] 
 |  Same [u][v] -> Same hR hL hMax [sym u][trans v u]

Recursive mirror : (n:Nat)(tr : Avl n) -> (Avl n) := 
 case tr {tr_eq} of 
  Leaf [p] -> Leaf n [p]
| Node hL hR hMax bal [p] trl trr d -> 
    Node n hR hL hMax (flip hL hR hMax bal) [p] (mirror hR trr) (mirror hL trl) d

Program rotateLeft : (y: Nat) (n : Nat) (tr1: Avl n)(tr2: Avl (S (S n))) -> (Or (Avl (S (S n))) (Avl (S (S (S n)))) ) := 
     case rotateRight y n  (mirror (S (S n)) tr2) (mirror n tr1) {eq} of
           Left tr' -> Left (Avl (S (S n))) (Avl (S (S (S n)))) (mirror (S (S n)) tr')
          | Right tr' -> Right (Avl (S (S n))) (Avl (S (S (S n)))) (mirror (S (S (S n))) tr')

-- want to confirm some properties about the mirror program. BTW: the behavior we want 
-- for the mirror is actually called involution from wiki.

-- Theorem involution : forall (n : Nat) (tr: Avl n). mirror n (mirror n tr) = tr :=
--         join 10 10

{-
Recursive insert : (x : Nat)(n:Nat)(tr : Avl n) -> (Or (Avl n)(Avl (S n))) :=
  case tr {tr_eq} of
       Leaf [p]->
       conv Right (Avl Z) (Avl (S Z))
           (Node (S Z) Z Z Z
           (Same Z Z Z [join 10 10] [join 10 10]) 
           [join 10 10] (Leaf Z [join 10 10]) (Leaf Z [join 10 10]) 
            x)
       by sym p at x.(Or (Avl x)(Avl (S x)))
     | Node hL hR hMax bal [p] trl trr y ->
              case (eq x y) {eeq} of
                    True -> Left (Avl n)(Avl (S n)) (Node n hL hR hMax bal [p] trl trr y)
                  | False -> case (x >= y) {eeeq} of
                                  False -> (case (insert x hL trl) {ins_eq} of
                                                       Left a -> Left (Avl n)(Avl (S n)) (Node n hL hR hMax bal [p] a trr y)
                                                     | Right b -> case bal {bal_eq} of
                                                                       Same [u] [v] -> 
                                                                          Right (Avl n)(Avl (S n)) 
                                                                          (Node (S n) (S hL) hR (S hL) 
                                                                          (More (S hL) hR (S hL) [conv (join 1 1: S hL = S hL) by (sym u) at x.(S hL = S x)][join 10 10]) 
                                                                          [conv (conv (conv (join 1 1: S n = S n) by p at x.(S n = S x)) by v at x.(S n = S (S x))) by u at x.(S n = S (S x))]
                                                                          b trr y) 
                                                                    |  Less [u] [v] ->
                                                                           Left (Avl n)(Avl (S n)) 
                                                                          (Node  n (S hL) hR hR
                                                                          (Same (S hL) hR hR [u][join 10 10]) 
                                                                          [conv p by v at x.(n = S x)]  b trr y) 
                                                                    |  More [u] [v] -> 
                                                                          let p1 = conv p by v at x.(n = S x); -- n = S hL
                                                                              p2 = conv p1 by u at x.(n = S x);  -- n = S S hR
                                                                              p3 = sym p2
                                                                          in
                                                                           conv (rotateRight y hR b trr) by p3 at x.(Or (Avl x)(Avl (S x))) )
                                |  True -> (case (insert x hR trr) {ins_eq} of
                                                  Left a -> Left (Avl n)(Avl (S n)) (Node n hL hR hMax bal [p] trl a y)
                                                | Right b -> case bal {bal_eq} of
                                                                  Same [u] [v] -> 
                                                                       Right (Avl n)(Avl (S n)) 
                                                                      (Node (S n) hL (S hR) (S hR) 
                                                                      (Less hL (S hR) (S hR) [conv (join 1 1: S hR = S hR) by u at x.(S hR = S x)][join 10 10]) 
                                                                      [conv (conv (join 1 1: S n = S n) by p at x.(S n = S x)) by v at x.(S n = S (S x))]
                                                                       trl b y) 
                                                                | More [u] [v] ->
                                                                      Left (Avl n)(Avl (S n))
                                                                     (Node  n hL (S hR) (S hR)
                                                                     (Same hL (S hR) (S hR) [sym u][join 10 10])
                                                                     [conv (conv p by v at x. (n = S x)) by u at x.(n = S x)] 
                                                                      trl b y)
                                                                |  Less [u] [v]  -> 
                                                                    let p1 = conv p by v at x.(n = S x); -- n = S hR
                                                                        p2 = conv p1 by u at x.(n = S x) -- n = S S hL
                                                                        p3 = sym p2
                                                                    in
                                                                    conv (rotateLeft y hL trl b) by p3 at x.(Or (Avl x)(Avl (S x))) )
-}

data Tuple : (a : Type) (b : Type) -> Type where
     Tuplize : (x : a) -> (y : b) -> Tuple a b    

Recursive delMin : (n : Nat)(tr: Avl(S n)) -> Tuple Nat (Or (Avl n) (Avl (S n))) :=
  case tr {tr_eq} of 
    Leaf [p] -> abort (Tuple Nat (Or (Avl n) (Avl (S n))))
  | Node hL hR hMax bal [p] trl trr x -> case trl {trl_eq} of
                                          Leaf [q] ->( case bal {bal_eq} of
                                                      Less [u] [v] ->  
                                                        let p1 = conv p by v at x.(S n = S x); -- S n = S hR
                                                            p2 = join 100 100:  n = pred (S n);
                                                            p3 = conv p2 by p1 at x.(n = pred x); 
                                                            p4 = join 100 100 : pred (S hR) = hR;
                                                            p5 = sym (trans p3 p4)
                                                        in
                                                           Tuplize x (Left(Avl n) (Avl (S n)) conv trr by p5 at x.(Avl x) ) 
                                                     | More [u] [v] -> abort (Tuple Nat (Or (Avl n) (Avl (S n))))
                                                     | Same [u] [v] ->
                                                        let p1 = conv p by v at x.(S n = S x); -- S n = S hR
                                                            p2 = join 100 100:  n = pred (S n);
                                                            p3 = conv p2 by p1 at x.(n = pred x); 
                                                            p4 = join 100 100 : pred (S hR) = hR;
                                                            p5 = sym (trans p3 p4)
                                                        in
                                                           Tuplize x (Left(Avl n) (Avl (S n)) conv trr by p5 at x.(Avl x) ) 
                                                           
                                                      )
                                    | Node trl_hL trl_hR trl_hMax trl_bal [q'] trl_l trl_r y ->
                                                case delMin hL trl {eeq} of
                                                     Tuplize y (Right trl') -> Tuplize y (Right )                                       


