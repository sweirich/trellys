module CKMachine where


data String : Type where
     Empstr : String
    | Str0  : String -> String
    | Str1  : String -> String

data Term : Type where
      Var : String-> Term
     |App : Term -> Term -> Term
|Lambdabs : String -> Term -> Term


data Bool : Type where
 False : Bool
| True : Bool

data StateT : Type where
    State: Term -> Cont ->StateT
  

data Cont  : Type where
    MT: Cont
   |Fn: String-> Term->Cont-> Cont
   |Ar: Cont -> Term -> Cont
    

type isLambda : Term -> Bool
 prog isLambda = \(l:Term) ->
   case l {l_eq} of 
     Lambdabs l' t' -> True
    |App l' t' -> False
    |Var l' -> False

 
type eq_str : String -> String -> Bool
prog rec eq_str (t:String)(s:String) =
  case t {t_eq} of
    Empstr -> (case s {s_eq} of
            Empstr -> True
          | Str0 s' -> False
          | Str1 s' -> False)
    | Str0 t' -> (case s {s_eq} of  
            Empstr -> False
           |Str0 s'-> (eq_str t' s') 
           |Str1 s' -> False)
    | Str1 t' -> (case s {s_eq} of  
            Empstr -> False
           |Str0 s' -> False 
           |Str1 s' -> (eq_str t' s'))




type substitute : Term -> String -> Term -> Term
    prog rec substitute (t :Term) (s:String) (t1: Term)=
        
       
          case t1 {t1_eq} of 
                 Var x' -> (case eq_str s x' {eqstr_eq} of
                           True -> t
                          |False -> t1)
                 |Lambdabs s' t' ->  (case (eq_str s s') {eqstr_eq} of
                           True -> t1
                          |False -> Lambdabs s' (substitute t s t') )
                 |App t2 t3 -> App (substitute t s t2)
                                   (substitute t s t3)



type isVar: Term-> Bool
prog isVar = \(t:Term) ->
 case t {t_eq} of
        Var x -> True
       | Lambdabs s t -> False
       | App t1 t2 -> False
 
type or : Bool -> Bool-> Bool
prog or = \(b:Bool)(b2:Bool) ->
     case b {b_eq} of
      True -> True
    | False -> b2

type isLambda : Term -> Bool
 prog isLambda = \(l:Term) ->
   case l {l_eq} of 
     Lambdabs l' t' -> True
    |App l' t' -> False
    |Var l' -> False


type isHeadNorm : Term-> Bool
prog  rec isHeadNorm (t:Term)=
        case t {t_eq} of
           App t1 t2 ->( case (isVar t1) {ivar_eq} of
                        True-> or (isHeadNorm t2) (isLambda t2)
                                 
                       |False-> case t1 {t1_eq} of
		       		  Var x -> abort Bool
				 | Lambdabs s t -> False
				 | App t1' t2' -> isHeadNorm t1)
          |Var x -> True
          |Lambdabs s t -> False

type step : StateT -> StateT
prog  step = \(s: StateT) ->
    case s {s_eq} of
      State t k-> case t {t_eq} of
                    App t1 t2 -> State t1 ( Ar k  t2)

                    |Lambdabs s' t' -> (case k {k_eq} of
                              MT-> State t k  
                             |Fn s'' t'' c' -> State( substitute t s'' t'') c'
                             |Ar  c' t' -> State t' (Fn s' t'  c')) 
                    |Var x' -> abort StateT


type reduce : StateT -> Term
prog rec reduce (s: StateT) =
    (case  s {st_eq} of

              State t k -> (case k {k_eq} of
                            MT-> (case t {t_eq} of
                                   Lambdabs s' t' -> t
                                   |Var x -> t
                                   |App t1 t2->(case (isHeadNorm t) {isT_eq} of
                                             True -> t
                                            |False -> reduce  (step( State t k))))
                           |Fn s'' t'' c'' -> reduce (step (State t (Fn s'' t'' c'')))
                           |Ar c''' t''' -> reduce (step (State t (Ar c''' t'''))))) 

                            
            
theorem reduce_test1 : reduce (State (App (Lambdabs( Str0 Empstr)
(App(Var (Str0 Empstr))(Var(Str0 Empstr)))) (Lambdabs (Str1 Empstr)(Var (Str1 Empstr))) )MT)= (Lambdabs( Str1 Empstr)( Var (Str1 Empstr)))
proof reduce_test1 = join 10000 10000

theorem reduce_test2 : reduce (State (App (Var (Str0 Empstr)) (Var (Str1 Empstr))) MT)= App (Var(Str0 Empstr))(Var(Str1 Empstr))
proof reduce_test2 = join 1000 1000             
              



                                     
 


