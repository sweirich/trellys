module CKMachine where


data String : Type where
     Empstr : String
    | Str0  : String -> String
    | Str1  : String -> String

data Term : Type where
      Var : String-> Term
     |App : Term -> Term -> Term
|Lambdabs : String -> Term -> Term


data Context : Type where
      Base : Context
     | Ct : Context -> Term -> Context
     | VC : String -> Term -> Context -> Context


data Bool : Type where
 False : Bool
| True : Bool

data StateT : Type where
    State: Term -> Cont ->StateT
  

data Cont  : Type where
    MT: Cont
   |Fn: String-> Term->Cont-> Cont
   |Ar: Cont -> Term -> Cont
    

type isLambda : Term -> Bool
 prog isLambda = \(l:Term) ->
   case l {l_eq} of 
     Lambdabs l' t' -> True
    |App l' t' -> False
    |Var l' -> False

type and : Bool -> Bool-> Bool
prog and = \(b:Bool)(b2:Bool) ->
     case b {b_eq} of
      True -> b2
    | False -> False

type eq_str : String -> String -> Bool
prog rec eq_str (t:String)(s:String) =
  case t {t_eq} of
    Empstr -> (case s {s_eq} of
            Empstr -> True
          | Str0 s' -> False
          | Str1 s' -> False)
    | Str0 t' -> (case s {s_eq} of  
            Empstr -> False
           |Str0 s'-> (eq_str t' s') 
           |Str1 s' -> False)
    | Str1 t' -> (case s {s_eq} of  
            Empstr -> False
           |Str0 s' -> False 
           |Str1 s' -> (eq_str t' s'))




type substitute : Term -> String -> Term -> Term
    prog rec substitute (t :Term) (s:String) (t1: Term)=
        
       
          case t1 {t1_eq} of 
                 Var x' -> (case eq_str s x' {eqstr_eq} of
                           True -> t
                          |False -> t1)
                 |Lambdabs s' t' ->  (case (eq_str s s') {eqstr_eq} of
                           True -> t1
                          |False -> Lambdabs s' (substitute t s t') )
                 |App t2 t3 -> App (substitute t s t2)
                                   (substitute t s t3)



type isVar: Term-> Bool
prog isVar = \(t:Term) ->
 case t {t_eq} of
        Var x -> True
       | Lambdabs s t -> False
       | App t1 t2 -> False
 
type or : Bool -> Bool-> Bool
prog or = \(b:Bool)(b2:Bool) ->
     case b {b_eq} of
      True -> True
    | False -> b2

type isLambda : Term -> Bool
 prog isLambda = \(l:Term) ->
   case l {l_eq} of 
     Lambdabs l' t' -> True
    |App l' t' -> False
    |Var l' -> False


type isHeadNorm : Term-> Bool
prog  rec isHeadNorm (t:Term)=
        case t {t_eq} of
           App t1 t2 ->( case (isVar t1) {ivar_eq} of
                        True-> or (isHeadNorm t2) (isLambda t2)
                                 
                       |False-> case t1 {t1_eq} of
		       		  Var x -> abort Bool
				 | Lambdabs s t -> False
				 | App t1' t2' -> isHeadNorm t1)
          |Var x -> True
          |Lambdabs s t -> False

type step : StateT -> StateT
prog  step = \(s: StateT) ->
    case s {s_eq} of
      State t k-> case t {t_eq} of
                    App t1 t2 -> State t1 ( Ar k  t2)

                    |Lambdabs s' t'' -> (case k {k_eq} of
                              MT-> State t k  
                             |Fn s'' t''' c' -> State( substitute t s'' t''') c'
                             |Ar  c' t' -> State t' (Fn s' t'' c')) 
                    |Var x' -> abort StateT


{- for the proof about step:

   if s1 and s2 are states, and step s1 = s2, then
   we want to prove that the term t1 (let's call it) which s1 represents
   can transition to the term t2 which s2 represents.

   What do we mean by "represents"?  We know the continuation in a state is
   encoding a context (in a way that enables more efficient interpreting).

   For example, the term 

   (*)    ((\x.x) (\y.y)) (\z.z)

   can be represented by several states actually:

   1.  < ((\x.x) (\y.y)) (\z.z) ,  mt >
   2.  < (\x.x) (\y.y) , <ar , (\z.z),  mt > >
   3.  < \x.x , < ar, (\y.y), <ar , (\z.z), mt>>>
   4.  < \y.y , < fn, (\x.x), <ar , (\z.z), mt>>>



   When this is defined, it should interpret all the example
   states (1) through (4) above as the example term (*).

   Then define


 
   just by calling kplug with the continuation and term which are 
   in the state.

   So then the final theorem to prove would be:

   forall(s1:StateT)(u1:s1!)(s2:StateT)(u2:s2!)(u:step s1 = s2).
   exists(v:StepSpec0 (interpstate s1) (interpstate s2)).v!

where we need also this definition, to handle the case
where the CK machine does not do a beta-reduction:

data StepSpec0 : (t1:Term) (t2:Term) -> Type where
  DidStep : StepSpec t1 t2 -> StepSpec0 t1 t2
| DntStep : [u:t1=t2] -> StepSpec0 t1 t2
  

-}


 type kplug : Cont -> Term -> Term
   prog rec kplug (c: Cont)(t:Term) = 
    case c {c_eq} of
         MT -> t 
        |Fn x t' k -> kplug (Ar k t) (Lambdabs x t') 
        |Ar k t' -> (kplug k (App t t'))

type interpstate : StateT -> Term
prog interpstate = \(s:StateT)->
  case s {s_eq} of
    State t' k'-> kplug k' t'
{-
type compare : Term->Term-> Bool
prog rec compare (t1:Term)(t2:Term) =
        case t1 {t1_eq} of
           Var x -> (case t2 {t2_eq} of
                     Var x'-> eq_str x x'
                    |Lambdabs s' t'-> False
                    |App t3' t4' -> False)
          |Lambdabs x t->(case t2 {t2_eq} of
                     Var x'-> False
                    |Lambdabs s' t'->(and (eq_str x s')(compare t t')) 
                    |App t3' t4' -> False)
y          |App t3 t4 ->(case t2 {t2_eq} of
                     Var x'-> False
                    |Lambdabs s' t'-> False
                    |App t3' t4' -> and (compare t3 t3')(compare t4 t4'))
-}

type plug : Context -> Term -> Term
  prog rec plug (c: Context) (t:Term) =
    case c {c_eq} of
                Base-> t
               |Ct c' t'->  App (plug c' t) t'               
               |VC s t' c' ->   App (Lambdabs s t') (plug  c' t)


type substitute : Term -> String -> Term -> Term
    prog rec substitute (t :Term) (s:String) (t1: Term)=
        
       
          case t1 {t1_eq} of 
                   Var x' -> (case eq_str s x' {eqstr_eq} of
                           True -> t
                          |False -> t1)
                 |Lambdabs s' t' ->  (case (eq_str s s') {eqstr_eq} of
                           True -> t1
                          |False -> Lambdabs s' (substitute t s t') )
                 |App t2 t3 -> App (substitute t s t2)
                                   (substitute t s t3)




data StepSpec : (t1:Term) (t2:Term) -> Type where
  CtxtBetaV : (c:Context) -> (x:String) -> (t:Term) -> 
              (ta:Term) ->
              [u0:isLambda ta = True] -> 
              [u1:t1 = (plug c (App (Lambdabs x t) ta))] ->
              [u2:t2 = (plug c (substitute ta x t))] ->
              StepSpec t1 t2


data StepSpec0 : (t1:Term) (t2:Term) -> Type where
  DidStep : StepSpec t1 t2 -> StepSpec0 t1 t2
| DntStep : [u:t1=t2] -> StepSpec0 t1 t2

-- axiom step_term : forall (t:StateT)(u:t!). step t ! 
axiom interp_term : forall (t:StateT)(p:t!). interpstate t ! 



type cont2ctxt : Cont -> Context -> Context
prog rec cont2ctxt (k:Cont) (c:Context) = 
      case k {k_eq} of 
            MT -> c
           |Ar k' t-> (cont2ctxt k' (Ct c t))
           |Fn s' t' k'->(cont2ctxt k' (VC s' t' c))


axiom plug_term : forall (c:Context)(y:c!)(t:Term)(u:t!). (plug c t) !

Inductive kplug_plug : forall(k:Cont){k_term}(c:Context)(c_term:c!)(t:Term)(t_term:t!).
                       kplug k (plug c t) = plug (cont2ctxt k c) t :=
               
         ( case k {k_eq} (k_term) of
              MT-> 
                   let p1 = morejoin{sym k_eq, k_term,(plug_term c c_term t t_term)}
                                     : (kplug k (plug c t)) = (plug c t);
                       p2= morejoin {sym k_eq, k_term, c_term}
                         : cont2ctxt k c= c;
                                 
                       p3= refl
                         : plug (cont2ctxt k c) t =  plug (cont2ctxt k c) t; 
                       p4 = conv p3 at 
                          plug (cont2ctxt k c) t =  plug (~p2) t;
                       p5 = trans  p4 (sym p1)
                          :  plug (cont2ctxt k c) t = kplug k (plug c t)  
                          in (sym p5)
            |Ar k' t'->
                        
                 let ih = kplug_plug k'(ord k_eq) (Ct c t')valax (Ct tcast c by c_term t') t t_term;
               p1=  morejoin { c_term } 
                 : cont2ctxt (Ar k' t') c = cont2ctxt k'  (Ct c t');
               
                p2 = conv p1 at
                  cont2ctxt ~k_eq c = cont2ctxt k'  (Ct c t');
               p3 = trans p1 (sym p2)   
                  : cont2ctxt (Ar k' t') c = cont2ctxt k c ;
               
               p4 = morejoin {sym k_eq, k_term,(plug_term c c_term t t_term)}
                 : kplug k (plug c t)= kplug k'(App (plug c t )t');
               
               p5 = morejoin{(valax (Ct tcast c by c_term t')), t_term}
                  :plug (Ct c t') t = App(plug c t)t';
           
                p6 = conv p4 at
                     kplug k (plug c t)= kplug k'~(sym p5);
                 --  : kplug k (plug c t) = kplug k' (plug (Ct c t') t)
                
                 p7 = trans (sym ih) (sym p6)                     
                   :  plug( cont2ctxt k' (Ct c t'))t= kplug k (plug c t );
                 
               p8 = trans (sym p1) p3 
                  :  cont2ctxt k' (Ct c t')=  cont2ctxt k c;
                      
               p9 = conv p7 at
                   ( plug ~p8 t)= kplug k (plug c t )
                in (sym p9)
                 

             |Fn s' t' k'->
                let ih = kplug_plug k'(ord k_eq) (VC s' t' c)valax (VC s' t'  tcast c by c_term ) t t_term;
                 p1=  morejoin { c_term } 
                 : cont2ctxt (Fn s' t' k') c = cont2ctxt k'(VC s' t' c);

                 p2 = conv p1 at
                  cont2ctxt ~k_eq c = cont2ctxt k'(VC s' t' c);
                
                 p3 = trans p1 (sym p2)   
                  : cont2ctxt  (Fn s' t' k') c = cont2ctxt k c; 
                 
                p34= (plug_term c c_term t t_term);

                 p4 = morejoin {sym k_eq, k_term, p34}
                 : kplug k (plug c t)= (kplug (Ar k' (plug c t))(Lambdabs s' t'));
                 
                
              
                p5 = morejoin{p34}
                   :  kplug (Ar k' (plug c t ))(Lambdabs s' t')= kplug k'(App (Lambdabs s' t')(plug c t )); 
                 
                p6 = morejoin{(valax (VC s' t' tcast c by c_term )), t_term}
                  :plug (VC s' t' c) t = App (Lambdabs s' t')(plug c t);    
                
                p7 = trans p4 p5
                   :    kplug k (plug c t)= kplug k'(App (Lambdabs s' t')(plug c t ));    
                 
                p8 = conv p7 at
                      kplug k (plug c t)= kplug k' ~(sym  p6);
                
                 p9= trans  p8 ih
                   :   kplug k (plug c t) = plug (cont2ctxt k' (VC s' t' c)) t; 
                
                 p10 = conv p9 at
                       kplug k (plug c t) = plug ~(sym p2) t  
                   in p10) 


Inductive step_sound : forall (s1:StateT){s1_term}(s2:StateT)(u2:s2!)(u:step s1 = s2).exists(v:StepSpec0 (interpstate s1) (interpstate s2)).v! :=
     (case s1 {s1_eq}(s1_term) of
       State t k -> (case t {t_eq}(valax t) of
                    App t1 t2 ->  let p1 = morejoin{sym s1_eq, sym t_eq}
                                         : step s1= State t1 (Ar k t2); 
                                      p2 =  trans(sym p1)  u 
                                         :   State t1 (Ar k t2) =s2;
                                      p3 = morejoin{sym s1_eq, sym p2, u2, sym t_eq }
                                         :interpstate s2 = kplug k (App t1 t2);
                                      p4 = morejoin {sym s1_eq, s1_term, sym t_eq}
                                         : interpstate s1 = kplug k(App t1 t2);
                                      p5 = trans p4 sym p3
                                         :interpstate s1=interpstate s2
                       in   pack (DntStep (interpstate s1) (interpstate s2)[p5]) , 
                            valax (DntStep (tcast (interpstate s1) by (interp_term s1 s1_term)) (tcast (interpstate s2) by (interp_term s2 u2)) [p5])                                   
                                                   
                   |Var x' ->
                             let p1 = morejoin{sym s1_eq, sym t_eq}
                                    : step s1 = abort StateT;  
                                 p2 = trans  (sym  p1)  u 
                                    :(abort StateT) = s2 
                                 in contraabort p2 u2
                                    
                   |Lambdabs s' t'' -> (case k {k_eq} valax k of
                      MT -> 
                            let p1 = morejoin {sym s1_eq, sym t_eq, sym k_eq}
                                   : step s1 = State t k;
                                p2 = trans sym p1 u
                                   : State t k = s2;
                                                                                                                             p3 = morejoin{sym s1_eq, sym p2, u2, sym t_eq, sym k_eq }
                                   :interpstate s2 = t;
                                p4 = morejoin {sym s1_eq, s1_term, sym t_eq, sym k_eq}
                                   : interpstate s1 = t;  
                                p5 = trans p4 (sym p3)
                                   : interpstate s1 = interpstate s2
                                                        
                            in   pack (DntStep (interpstate s1) (interpstate s2)[p5]) , 
                                       valax (DntStep (tcast (interpstate s1) by (interp_term s1 s1_term)) (tcast (interpstate s2) by (interp_term s2 u2)) [p5]) 
                                                                     
                     |Ar c' t' -> 
                              let p1 = morejoin {sym s1_eq, sym t_eq, sym k_eq}
                                     : step s1 = State t'(Fn s' t'' c') ;
                                  p2 = trans (sym p1) u
                                     : State t'(Fn s' t'' c') = s2;
                                                            
                                  p3 = morejoin{sym s1_eq, sym p2, u2, sym t_eq, sym k_eq }
                                     : interpstate s2 = kplug (Ar c' t')(Lambdabs s' t'');
                                                        
                                  p4 = morejoin {sym s1_eq, s1_term, sym t_eq, sym k_eq}
                                     : interpstate s1 =  kplug (Ar c' t')(Lambdabs s' t'');
                                                           
                                  p5 = trans p4 (sym p3)
                                     : interpstate s1 = interpstate s2
                                                        
                                 in   pack (DntStep (interpstate s1) (interpstate s2)[p5]) , 
                                         valax (DntStep (tcast (interpstate s1) by (interp_term s1 s1_term)) (tcast (interpstate s2) by (interp_term s2 u2)) [p5]) 
                                             
                      |Fn s' t' c' -> 
                         let p1 =  morejoin{sym t_eq, sym k_eq}
                                : interpstate(State (Lambdabs s' t'')(Fn s' t' c'))=kplug (Fn s' t' c') (Lambdabs s' t'');
                             p2 = morejoin{valax(Fn s' t' c'), valax (Lambdabs s' t'') }
                                :kplug (Fn s' t' c') (Lambdabs s' t'')=kplug (Ar c' (Lambdabs s' t''))(Lambdabs s' t');   
                            
                             p3 = morejoin{valax (Lambdabs s' t'')  }
                                :kplug (Ar c' (Lambdabs s' t''))(Lambdabs s' t')= kplug c' (App (Lambdabs s' t') (Lambdabs s' t''));

                             p4 = morejoin{valax (Lambdabs s' t'')}
                                :kplug c'  (App (Lambdabs s' t') (Lambdabs s' t''))= kplug c' (plug Base  (App (Lambdabs s' t') (Lambdabs s' t''))   );
--left---------------------------------------------------------------------------------------
                            

                            p45= valax  (Lambdabs s' t'') ;
                            p46=valax  s';
                            p47= valax t'; 
                            p5 = morejoin{ valax( State (substitute( tcast (Lambdabs s' t'') by p45)s' t'))}
                               : interpstate (State(substitute (Lambdabs s' t'')  s' t') c') = kplug c' (substitute (Lambdabs s' t'')  s' t')


-- = morejoin{sym t_eq, valax (Lambdabs s' t''),  }
  --                             : kplug c' (substitute (Lambdabs s' t'') s' t')= kplug c' (plug Base (substitute (Lambdabs s' t'') s' t'))                                    
                            in p5

  )))
                           

                      


type reduce : StateT -> Term
prog rec reduce (s: StateT) =
    (case s {st_eq} of
      State t k -> (case k {k_eq} of
                    MT-> (case t {t_eq} of
                           Lambdabs s' t' -> t
                          |Var x -> t
                          |App t1 t2->reduce (step(State t1 (Ar k t2))))
                   |Fn s'' t'' c'' -> reduce (step (State t (Fn s'' t'' c'')))
                   |Ar c''' t''' -> reduce (step (State t (Ar c''' t'''))))) 

                            

Eval (reduce (State (App (Lambdabs( Str0 Empstr)
      (App(Var (Str0 Empstr))(Var(Str0 Empstr)))) (Lambdabs (Str1 Empstr)(Var (Str1 Empstr))) )MT))
            
theorem reduce_test1 : reduce (State (App (Lambdabs( Str0 Empstr)
(App(Var (Str0 Empstr))(Var(Str0 Empstr)))) (Lambdabs (Str1 Empstr)(Var (Str1 Empstr))) )MT)= (Lambdabs( Str1 Empstr)( Var (Str1 Empstr)))
proof reduce_test1 = join 10000 10000

           

theorem interpstate_test1 : interpstate (State(Lambdabs( Str0 Empstr)(Var (Str0 Empstr))) (Ar MT (Lambdabs( Str1(Str0 Empstr))(Var (Str1(Str0 Empstr))))))=  
(App(Lambdabs( Str0 Empstr)(Var (Str0 Empstr)))(Lambdabs( Str1(Str0 Empstr))(Var (Str1(Str0 Empstr)))))

proof interpstate_test1 = join 1000 1000

                                     
 


