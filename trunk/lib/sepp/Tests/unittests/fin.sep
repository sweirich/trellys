module scratch where

data Bool : Type where
  False : Bool
| True : Bool
  
type eq_bool : Bool -> Bool -> Bool
prog eq_bool = \(b1:Bool)(b2:Bool) ->
  case b1 {b1_eq} of
    False -> (case b2 {b2_eq} of
      False -> True
    | True -> False)
  | True -> case b2 {b2_eq} of
      False -> False
    | True -> True

data Unit : Type where
  Un : Unit

type eq_unit : Unit -> Unit -> Bool
prog eq_unit = \(a1:Unit)(a2:Unit) ->
  True  

data Nat : Type where
  Z : Nat
| S : Nat -> Nat

type eq_nat : Nat -> Nat -> Bool
prog rec eq_nat (n:Nat)(m:Nat) =
  case n {n_eq} of
    Z -> (case m {m_eq} of
      Z -> True
    | S m' -> False)
  | S n' -> case m {m_eq} of
      Z -> False
    | S m' -> (eq_nat n' m')

data Fin : (m:Nat) -> Type where
  FZ : [n:Nat] -> [u:S n = m] -> Fin m
| FS : [n:Nat] -> [u:S n = m] -> (i : Fin n) -> Fin m

type a : Fin (S (S (S Z)))
prog a = FZ [(S (S (S Z)))] [(S (S Z))] [refl]

type emb : (n:Nat) -> (x:Fin n) -> Fin (S n)
prog rec emb (m:Nat)(i:Fin m) =
  case i {i_eq} of
    FZ n u -> FZ [(S m)] [m] [refl]
  | FS n u i -> FS [(S m)] [m] [refl] conv (emb n i) at Fin ~u

type vect : (a:Type) -> (n:Nat) -> Type
prog vect = \(a:Type)(n:Nat) -> (Fin n) -> a

type vec : (a:Type) -> (x:a) -> (n:Nat) -> (vect a n)
prog vec = \(a:Type)(x:a)(n:Nat) ->
  conv (\(y:Fin n) -> x)
  at ~(join 10 10 : ((Fin n) -> a) = vect a n)

-- universe showcased in paper  
data U : Type where
  UNat : U
| UArrow : (a : U) -> (b : U) -> U

-- custom universe
data U' : Type where
  UNat : U'
| UUnit : U'
| UBool : U'

-- decoding function (from paper)
type el : U -> Type
prog rec el (a:U) =
  case a {a_eq} of
      UNat -> Nat
    | UArrow b c -> (el b) -> (el c)

-- decoding function for my custom universe    
type el' : U' -> Type
prog rec el' (a:U') =
  case a {a_eq} of
      UNat -> Nat
    | UUnit -> Unit
    | UBool -> Bool

-- a generic equals function    
type gen_eq : (a:U') -> (el' a) -> (el' a) -> Bool
prog gen_eq = \(a:U')(x:(el' a))(y:(el' a)) ->
  case a {a_eq} of
    UUnit -> eq_unit (conv x at ~(morejoin {sym a_eq}: el' a = Unit))
                     (conv y at ~(morejoin {sym a_eq}: el' a = Unit))
  | UNat -> eq_nat (conv x at ~(morejoin {sym a_eq}: el' a = Nat))
                   (conv y at ~(morejoin {sym a_eq}: el' a = Nat))
  | UBool -> eq_bool (conv x at ~(morejoin {sym a_eq}: el' a = Bool))
                     (conv y at ~(morejoin {sym a_eq}: el' a = Bool))

-- the UArrow case encounters an error		     
-- type zero : (a:U) -> (el a)
-- prog rec zero (a:U) =
--    case a {a_eq} of
--      UNat -> conv Z at ~(morejoin {sym a_eq}: Nat = el a)
--    | UArrow b c -> (el b -> zero c) 

data Lam : (m:Nat) -> Type where
  LVar : (n:Nat) -> (x : Fin n) -> Lam n
| LApp : (n:Nat) -> (f : Lam n) -> (a : Lam n) -> Lam n
| LLam : [n:Nat] -> [u:S n = m] -> (t : Lam m) -> Lam n

-- type close : (n:Nat) -> (t : Lam n) -> Lam Z
-- prog rec close (n:Nat)(t : Lam n) =     
--   case n {n_eq} of
--     Z -> t
--   | S n' -> close n' (LLam [n'] [n_eq] t)

data Bush : (a:Type) -> Type where
  Nil : Bush a
| Cons : (x:a) -> (y:(Bush (Bush a))) -> Bush a

data WBush : Type where
  W : (Bush WBush) -> WBush

-- kinds
data Kind : Type where
  KStar : Kind
| KArrow : Kind -> Kind -> Kind

-- sequences of kinds
data Sig : Type where
  SEps : Sig -- empty sequence
| SCons : Kind -> Sig -> Sig

-- signature corresponding to the declaration of Bush and WBush
type deltaW : Sig
prog deltaW =
  (SCons (KArrow KStar KStar) (SCons KStar SEps))

-- typed de Bruijn variables  
data Var : (s:Sig)(k:Kind) -> Type where
  VZ : Var (SCons k s) k
| VS : (j:Kind) -> (v:Var s k) -> Var (SCons j s) k 

-- polynomial type expressions representing the RHS of a datatype declaration
data Ty : (d:Sig)(l:Sig)(k:Kind) -> Type where
  D : Var d k -> Ty d l k
| V : Var l k -> Ty d l k
| Dot : (j:Kind) -> Ty d l (KArrow j k) -> Ty d l j -> Ty d l k 
| Zero : Ty d l KStar
| One : Ty d l KStar  
| Sum : Ty d l KStar -> Ty d l KStar -> Ty d l KStar
| Prod : Ty d l KStar -> Ty d l KStar -> Ty d l KStar

type interpret_sig : Sig -> Type
prog interpret_sig = \(d:Sig) -> (k:Kind) ->
 (Var d k) -> (Ty d (SCons k SEps) KStar)

type args : Sig -> Kind -> Type
prog args = \(d:Sig)(k:Kind) -> (j:Kind) ->
     (Var (SCons k SEps) j) -> (Ty d SEps j)

--type aHd : (j:Kind) -> (k:Kind) -> (s:Sig) -> ((Var (SCons k s) j)  -> (Ty s SEps j)) -> (Ty s SEps j)
--prog aHd = \(j:Kind)(k:Kind)(s:Sig)(xs:((Var (SCons k s) j)  -> (Ty s SEps j))) ->
--  xs (VZ [s] [k])
 
type aHd :
  (j:Kind) -> (k:Kind) -> (s:Sig) -> ((Var (SCons k s) k)  -> (Ty s SEps k)) ->
  (Ty s SEps k)
prog aHd = \(j:Kind)(k:Kind)(s:Sig)(xs:((Var (SCons k s) k)  -> (Ty s SEps k))) ->
  xs (VZ [s] [k]) 

type aTl :
  (j:Kind) -> (k:Kind) -> (s:Sig) ->
  ((Var (SCons k s) k)  -> (Ty s SEps k)) ->
  (Ty s SEps k)
prog aTl = \(j:Kind)(k:Kind)(s:Sig)(xs:((Var (SCons k s) k)  -> (Ty s SEps k))) ->
  (v:(Var s k)) -> xs (VS [s] [k] k v) 
  
type app :
  (d:Sig) -> (k:Kind) -> (Ty d SEps k) ->
  ((Var (SCons k d) k)  -> (Ty d SEps k)) ->
  (Ty d SEps k)
prog rec app (d:Sig)(k:Kind)(x:Ty d SEps k)(y:((Var (SCons k d) k) -> (Ty d SEps k))) =
  case k {k_eq} of
    KStar -> x
  | KArrow j k ->
    app
      (Dot [d] [SEps] [k] j
        (conv x at Ty d SEps ~(sym k_eq))
        (aHd j k d y))
      (aTl j k d y)     
