
* Legend:

[i] indicates the feature has been implemented
[t] indicates the implemented and tested (list test case)

* Parser Productions

The name in quotes indicates the production that generates the constructor.

[x] Var (variable)
[x] Con (constructor)
[x] Formula (formula)
[x] Type (sepType)
[x] Pi (within expr table, or piType)
[x] Forall (quantification)
[x] App (factor)
[x] Lambda (abstraction)
[x] Case (caseExpr)
[x] TermCase (termCase)
[x] Join (joinExpr)
[x] Equal (within expr table)
[x] Val (valExpr)
[x] Terminates (within expr table)
[x] Contra (contraExpr)
[x] ContraAbort (contraAbortExpr)
[x] Abort (abortExpr)
[x] Conv (convExpr)
[x] Ord (ordExpr)
[x] IndTL (within expr table)
[x] Ind (indExpr)
[x] Rec (recExpr)
[x] Ann (within expr table)
[x] Parens (within term)


* Pretty Printer

All done


* Type Judgements

** S,G |- val t

Done, except that Nat is not built-in, so not supported.


** S,G |- LK : LogicalKind

Done, except need to check to make make sure that the quantifier type is of the
'A' syntactic class.

** S,G |- P : LK

[ ] Pred_Annotate
[ ] Pred_Forall1
[x] Pred_Forall2
[x] Pred_Forall3
[x] Pred_Forall4
[x] Pred_K_Eq
[x] Pred_Terminates
[x] Pred_Lam
[x] Pred_App


* Notes

** Syntax:
*** Multi arity functions and foralls and pis
*** Reuse binders in signatures and definitions

* Example Programs

** Lemma instantiation

** Derived ord over equalities/implicit conv
** Context representations
** Reverse order of case-generated equalites to be C xi = y
** Context representations for convs and 'joinabort'
** the abort context corresponds to a cbv evaluation context.
** strictness axioms for termcase abort;
   x = abort
   ————————–
      f x


    f = abort
    -————————-
      f x = abort


