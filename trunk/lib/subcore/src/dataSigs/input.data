data Void : where { }

data Unit : where { tt : -> Unit}

data Nat : where
  { Z : -> Nat
  ; S : (n:Nat) -> Nat
  }

data List (a:*) : where
  { 
    Nil :  -> (List a)
  ; Cons : (x:a)(xs:(List a)) -> (List a)
  }

data Vec (a:*) : (n:Nat) where
  { 
    VNil :  -> (Vec a Z)
  ; VCons : (m:Nat)(x:a)(xs:(Vec a m)) -> (Vec a (S m))
  }

data Eq (A:*) (a:A) : (b:A) where
  { 
    EqRefl : -> (Eq A a a)
  }
