# example suggested by Nathan Collins, to highlight an issue
# I pointed out with erasure and datatypes.
#
# data Cast [t:Type] : * where
#   MkCast : t -> Cast [t]
#
# cast : [t1 t2 : Type] -> t1 -> t2
# cast [t1] [t2] x = 
#   case conv (MkCast [t1] x) by (join : Cast [t1] = Cast [t2]) of
#     MkCast [_] x -> x
#
# selfstar does not have erasure yet, so this example
# is not complete at the moment.

Fix Cast : * -> * =
  \ A : * . self n . ! C : ((Cast A) -> *) .
    (! a : A . (C (Mkcast A a))) ->
    (C conv n to (Cast A) by refl , [(unfold A) ; eval]) ,
Mkcast : ! A : *. A -> (Cast A) =
  \ A : * . \ a : A .
    conv
      \ C : ((Cast A) -> *) .
      \ x : (!a:A.(C (Mkcast A a))).
        (x a) 
    to (Cast A) 
   by (refl -> refl -> (C [(unfold refl refl);eval])),
       [ (unfold A) ; eval ; substself ]

# the cast function above is not definable currently
# (nor should it be in a sound extension of selfstar
# with compile-time arguments), since we cannot prove
# Cast t1 = Cast t2.
  