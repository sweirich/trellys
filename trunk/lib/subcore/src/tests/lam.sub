Fix 
trm : * =
  self n. 
   ! C : (trm => *). 
   (! t1 : trm. ! t2 : trm . (C (app t1 t2))) ->
   (! t1 : (trm -> trm) . (C (lam t1))) ->
   (C conv n to trm by refl , unfold) ,
app : trm -> trm -> trm = 
  \ t1 : trm . \ t2 : trm.
  conv
    \ C : (trm => *).
    \ a : (! t1 : trm. ! t2 : trm . (C (app t1 t2))) .
    \ l : (! t1 : (trm -> trm) . (C (lam t1))) .
      (a t1 t2)
  to trm
  by (! C : refl . refl -> refl -> 
        (C [ (unfold refl refl) ; eval])),
     [unfold; substself],
lam : (trm -> trm) -> trm = 
  \ n : (trm -> trm).
  conv
  \ C : (trm => *).
   \ a : (! t1 : trm. ! t2 : trm . (C (app t1 t2))) .
   \ l : (! t1 : (trm -> trm) . (C (lam t1))) .
    (l n)
  to trm
  by (! C : refl . refl -> refl -> 
        (C [ (unfold refl) ; eval])),
     [unfold; substself]

Define trm_elim : 
   ! t : trm.
   ! C : (trm => *). 
   (! t1 : trm. ! t2 : trm . (C (app t1 t2))) ->
   (! t1 : (trm -> trm) . (C (lam t1))) ->
   (C t) =
  \ t : trm.
  conv t 
  to ! C : (trm => *). 
   (! t1 : trm. ! t2 : trm . (C (app t1 t2))) ->
   (! t1 : (trm -> trm) . (C (lam t1))) ->
   (C t)
  by [ unfold ; substself ] , refl

Fix loop : ! A : *. A =
  \ A : *. (loop A)

Fix interp : trm -> trm =
  \ t : trm . 
  conv
  (trm_elim t
    (\ x :: trm . trm)
    (\ t1 : trm . \ t2 : trm.
      let v1 : trm = (interp t1) in
      let v2 : trm = (interp t2) in
        conv
        (trm_elim v1
           (\ x :: trm . trm)
           (\ t1 : trm . \ t2 : trm . conv (loop trm) to ((\ x :: trm . trm) (app t1 t2)) by refl , eval)
           (\ t1 : (trm -> trm) . 
             conv
             (interp (t1 v2))
             to ((\ x :: trm . trm) (lam t1))
             by refl , eval))
        to ((\ x :: trm . trm) (app t1 t2))
        by eval , eval
    )
    (\ t1 : (trm -> trm) . conv t to ((\ x :: trm . trm) (lam t1)) by refl , eval))
    to trm
    by eval , refl
       