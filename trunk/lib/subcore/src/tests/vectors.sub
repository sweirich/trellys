Fix nat : * = 
        self n . ! C : (nat => *) . (! n : nat. (C (succ n))) -> (C zero) -> 
                   (C conv n to nat by refl, unfold) 
    ,
    zero : nat = 
         conv \ C : nat => * . \ s : (! n : nat. (C (succ n))) . \ z : (C zero) . z 
         to nat 
         by (! C : refl . (! s : refl . (! z : refl . (C unfold)))),
            [ unfold ; substself ]
           
    ,
    succ : nat -> nat = 
         \ n : nat . 
           conv \ C : nat => * . \ s : (! n : nat. (C (succ n))) . \ z : (C zero) . (s n) 
           to nat
           by ( ! C : refl . refl -> refl -> (C [ (unfold refl) ; eval ])) ,
              [ unfold ; substself ]

# this just allows us to eliminate a nat in other code, without doing an explicit conv there.
Define nat_elim : ! n : nat . 
                  ! C : (nat => *) . 
                  (! n : nat. (C (succ n))) -> 
                  (C zero) -> 
                  (C n) =
  \ n : nat .
  (conv n to ! C : (nat => *) . (! n : nat. (C (succ n))) -> (C zero) -> (C n) 
             by [ unfold ; substself ] , refl)



Fix add : nat -> nat -> nat =
    \ n : nat . \ m : nat .
       (conv
          (nat_elim n
            (\ n :: nat . nat))
         to ((nat -> nat) -> nat -> nat)
         by ((refl -> [ (refl (unfold refl)); eval]) -> eval -> eval), refl
         (\ p : nat . (succ (add p m))) 
         m)


Fix vec :  * -> nat -> * =  \ A : * . \n : nat . self l . ! C :  (! m:nat. (vec A m) -> *) .  
                       ! vnilCase : (C zero (vnil A)) .
                       ! vconsCase : (!p:nat . (! x : A . ! xs : (vec A p).  (C (succ p) (vcons A p x xs)))) .
                        (C n (conv l to (vec A n) by refl , [(unfold refl refl); eval])),
    vnil : ! A : * . (vec A zero) = 
      conv                      
         \ A : * . \C : (!m:nat . (vec A m) -> *) . 
            \ vnilCase : (C zero (vnil A)) . 
            \ vconsCase : (!p:nat . (! x:A . ! xs : (vec A p) . (C (succ p) (vcons A p x xs)))) .
            vnilCase
      to ! A : * . (vec A zero)
      by (! A : refl . ! C : refl . ! vnilCase : refl . ! vconsCase : refl . (C refl ([(unfold refl); eval]))),
         (! A : refl . [(unfold refl refl); eval; substself]),

    vcons:  ! A : * . ! n : nat . A -> (vec A n) -> (vec A (succ n)) =  
     conv 
      \ A : * .\ n : nat .
       \x:A  . \xs:(vec A n) . 
         \C : (!p:nat . (vec A p) -> *) .
          \vnilCase : (C zero (vnil A)) .
          \vconsCase : (!p:nat . (! x:A . ! xs : (vec A p ) . (C (succ p) (vcons A p x xs)))) .
               (vconsCase n x xs)
     to 
        ! A : * . ! n : nat . (! x:A . (! xs:(vec A n) . (vec A (succ n))))
     by 
        (! A : refl . (! n : refl . (! x: refl . (! xs:refl  . (! C : refl . (! vnilCase:refl . (!vconsCase:refl. (C refl [(unfold refl refl refl refl);eval])))))))),
        (! A : refl . (! n : refl . (! x: refl . (! xs:refl . [(unfold refl refl); eval; substself]))))



Fix vappend : !A : * . ! m:nat . ! n:nat . ! p: (vec A m) . ! q : (vec A n) . (vec A (add m n)) =
  \A : * .  
     \m : nat . \n : nat . \ p: (vec A m) . \q : (vec A n) . 
         # case p of
         #    vnil -> (so m = Z. plus Z n = n). cast q by above.
         #    vcons x xs -> so m = succ m'. 
         #                     plus m n = succ (plus m' n).  [1]
         #                     vappend xs q : vec A (plus m' n)   
         #                     vcons A x (vappend xs q) : vec A (succ (plus m' n))
         #                     cast by [1] to get vcons A x (vappend xs q) : Vec A (plus m n)
     conv          
         ((conv p 
          to (! C : (! m:nat. (vec A m) -> *).  
                      ! vnilCase : (C zero (vnil A)) .
                      ! vconsCase : (!p:nat . (! x : A . ! xs : (vec A p).  (C (succ p) (vcons A p x xs)))) . 
                 (C m p))
          by [(unfold refl refl); eval; substself] ,refl)
          (\m':nat. \v':(vec A m') . (vec A (add m' n)))
          (conv q 
            to ((\ m' : nat . (\ v' : (vec A m') . (vec A (add m' n)))) zero (vnil A))
             by refl, [(refl unfold (unfold refl)); eval; (refl refl (unfold refl refl)); (refl refl eval<unfold>)])
          (conv
            (\p':nat . \x:A . \xs:(vec A p') . (vcons A (add p' n) x (vappend A p' n xs q)))
          to (! p' : nat . (! x : A . (! xs : (vec A p') . ((\ m' : nat . (\ v' : (vec A m') . (vec A (add m' n)))) (succ p') (vcons A p' x xs)))))
          by (! p' : refl . (! x : refl . (! xs : refl . (vec A (eval<unfold>))))), 
             (! p' : refl . (! x : refl . (! xs : refl . [(refl eval<unfold> refl); eval; (vec A eval<unfold>)]))))
        )
    to (vec A (add m n))
    by eval,
       refl

         
