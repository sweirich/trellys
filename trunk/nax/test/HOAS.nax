--------------------------------------------------------
-- String functions

synonym String = List Char

append xs ys =
  mcata xs with
    cat Nil = ys
    cat (Cons z zs) = cons z (cat zs)

cat xs = 
   mcata xs with
     cat  Nil = []
     cat  (Cons str xs) = append str (cat xs)

new n = cat["x",show n]

----------------------------------------------
data E: (* -> *) -> * -> * where
  Const: Int -> E r Int
  App: r (a -> b) -> r a -> E r b
  Abs: (r a -> r b) -> E r (a -> b)
  Pair: r a -> r b -> E r (a,b)
    deriving fixpoint Exp

data V : (* -> *) -> * -> * where
  Vnat : Int -> V r Int
  Vfun : (r a -> r b) -> V r (a -> b)
  Vpair: (r a) -> (r b)  -> V r (a,b)
    deriving fixpoint Val


data Id x = MkId x
unId (MkId x) = x 

k x y = x

showL x = 
  (msfcata{t . Int -> String} x with 
    sh inv (Const n) m = show n
    sh inv (App x y) m = cat ["(",sh x m," ",sh y m,")"]
    sh inv (Pair x y) m = cat ["(",sh x m,",",sh y m,")"]
    sh inv (Abs f) m = 
        cat["(fn ",new m," => ",sh (f (inv (k (new m)))) (m+1),")"]) 0

{-
 msfcata :
  ( (forall r i . r i -> ans i) ->    -- call   
    (forall r i . ans i -> r i) ->    -- inv
    (forall r . F r j -> ans j) )
  -> mu F j -> ans j
-}

-- eval : Exp t -> Id t
eval x = msfcata { t . Id t } x with
  call inv (Const n) = MkId n
  call inv (App f x) = MkId (unId(call f) (unId(call x)))
  call inv (Pair x y) = MkId(unId (call x), unId (call y))
  call inv (Abs f) = MkId(\v -> unId(call (f (inv (MkId v)))))

id = abs (\x -> x)


     
--------------------------------------------------------
-- Embedding in a type indexed Value


x= 55
-- axiom unVfun : Val (a -> b) -> Val a -> Val b

unVfun x = mprsi{ (a->b) . Val a -> Val b} x with
              call cast uncast (Vfun f) = \ x -> cast(f(uncast x))
  
-- forall a:* . Exp a -> Val a
veval e = msfcata { t . Val t } e with
             call inv (Const n) = vnat n
             call inv (App f x) = unVfun (call f) (call x)
             call inv (Pair x y) = vpair (call x) (call y)
             call inv (Abs f) = vfun(\v -> (call (f (inv v))))
             

rei x = msfcata{ t . Exp t } x with
             call inv (Vnat n) = const n
             call inv (Vpair x y) = pair (call x) (call y)
             call inv (Vfun f) = abs (\ t -> call (f (inv t)))

-- the problem is that we can define this function
-- it should be  add1 x = msfcata{ t . Val t } x with ...
-- then you cannot define add1
add1 x = msfcata{ Int . Val Int } x with
           call inv (Vnat n) = vnat (n+1)

-- this is itself okay but should not be used inside msfcata
add1' x = vnat ( mcata { t . Int } x with
                   call (Vnat n) = n+1
                   call (Vfun f) = 0   )

-- the right approach
add1'' x = vnat ( msfcata { Int . Int } x with
                     call inv (Vnat n) = n+1
                     -- call inv (Vfun f) = 0 
                )

expadd1 = rei (vfun add1)
expadd1' = rei (vfun add1')
expadd1'' = rei (vfun add1'')

e1 = app (abs (\ x -> x)) (const 3) 
e3 = abs (\ x -> pair e1 x)
e2 = app expadd1 e1 -- this is problematic because of add1 not being polymorphic
e2' = app expadd1' e1 -- this makes a problem because of add1' using mcata
e2'' = app expadd1'' e1 -- this is okay!!!!!!!!!!!!!!!!! hurray!!!!

norm x = showL (rei (veval x))

----------------------------------------------------------
-- Embedding in a term-indexed value

data T r = Integer | Arr r r deriving fixpoint Ty

data Trm: ({Ty} -> *) -> {Ty} -> * where
  Tconst: Int -> Trm r {`integer}
  Tapp: r {`arr a b} -> r {a} -> Trm r {b}
  Tabs: (r {a} -> r {b}) -> Trm r {`arr a b}
    deriving fixpoint Term

data V' : ({Ty} -> *) -> {Ty} -> * where
  Vnat' : Int -> V' r {`integer}
  Vfun' : (r{a} -> r{b}) -> V' r {`arr a b}
    deriving fixpoint Val'
    
reif x = msfcata{{t} . Term{t}} x with
             call inv (Vnat' n) = tconst n
             call inv (Vfun' f) = tabs (\ t -> call (f (inv t)))
    
-- axiom unVfun' : Val' {`arr a b} -> Val' {a} -> Val' {b}
{- mprsi has a type like this
 forall j .
  ( (forall r i . r i -> ans i) ->                -- call   
    (forall r i . (i < j) => r i -> mu F i) ->    -- cast   
    (forall r i . (i < j) => mu F i -> r i) ->    -- uncast 
    (forall r . F r j -> ans j) )
  -> mu F j -> ans j
-}  


unVfun' x = mprsi{ {`arr a b} . Val' {a} -> Val' {b}} x with
              call cast uncast (Vfun' f) = \ x -> cast(f(uncast x))

ueval e = msfcata { {t} . Val' {t} } e with
            call inv (Tconst n) = vnat' n
            call inv (Tapp f x) = unVfun' (call f) (call x)
            call inv (Tabs f) = vfun'(\v -> (call (f (inv v)))) 

-- the problem is that we can define this function
-- it should be  plus1 x = msfcata{ {t} . Val' {t} } x with ...
-- then you cannot define plus1
plus1 x = msfcata{ {`integer} . Val' {`integer}} x with
           call inv (Vnat' n) = vnat' (n+1)

-- this is itself okay but should not be used inside msfcata
plus1' x = vnat' ( mcata { {t} . Int } x with
                     call (Vnat' n) = n+1
                     call (Vfun' f) = 0   )

-- the right approach
plus1'' x = vnat' ( msfcata { {t} . Int } x with
                      call inv (Vnat' n) = n+1
                      call inv (Vfun' f) = 0  )

          
termplus1 = reif (vfun' plus1)
termplus1' = reif (vfun' plus1')
termplus1'' = reif (vfun' plus1'')

t1 = tapp (tabs (\ x -> x)) (tconst 3)  
t2 = tapp termplus1 t1 -- this is problemematic because of plus1 not polymorphic
t2' = tapp termplus1' t1 -- this makes a problem because of plus1 using mcata
t2'' = tapp termplus1'' t1 -- this is okay!!!!!!!!!!!!!!!!! hurray!!!!

{- forall j .
  ( (forall r i . r i -> ans i) ->                -- call   
    (forall r i . (i < j) => r i -> mu F i) ->    -- cast   
    (forall r i . (i < j) => mu F i -> r i) ->    -- uncast 
    (forall r . F r j -> ans j) )
  -> mu F j -> ans j

apV :: Value (a -> b) -> Value a -> Value b
needs cast uncast stuff
-}





