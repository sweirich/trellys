
data T r = Integer | Arr r r deriving fixpoint Ty

data Trm: (* -> {Ty} -> *) -> * -> {Ty} -> * where
  Tconst: Int -> Trm r ans {`integer}
  Tapp: r ans {`arr a b} -> r ans {a} -> Trm r ans {b}
  Tabs: (forall ans . r ans {az} -> r ans {b}) -> Trm r ans {`arr az b}
    deriving fixpoint Term
    
axiom test : Term Int {`integer} -> Term a {`integer}    

f x = mcata{axy {txy} . Int} x with
        rcall (Tabs f) = 7
{-
Term ans i = mu[* -> {Ty} -> *] Trm ans i   



-- below "ans" is a name for the index transformer.
msfcata{ans: {Ty} -> *}: forall i (i: {Ty}) .
  (forall j . r ans j -> ans j) ->   -- rec_call
  (forall j . ans j -> r ans j) ->   -- inv
  (forall j . Trm r ans j -> ans j)  -- Sub terms
  (Term (ans i) i -> ans i)
  
Note that any function that analyzes a term with msfcata
will have type (Term (ans i) i -> ans i) where "ans" is not
polymorphic. Thus such a function could never be an argument
to tabs which expects a function with the polymorphic type 
(forall ans . Term ans {a} -> Term ans {b})

Note that any function built with lambda abstraction
and the constructors tconst, tapp, tabs, will be polymorphic.
And all actual Terms will also be polymorphic.


add1'' x = vnat ( msfcata { Int . Int } x with
                     call inv (Vnat n) = n+1 )

add1'' :: forall a . Value (Value a Int) Int -> Value a Int  

-}