data Tag = E | O

flip E = O
flip O = E
    
data P: (Tag -> Nat -> *) -> Tag -> Nat -> * where
  Base : P r {E} {In[*] Zero} 
  StepO : r {O} {i} -> P r {E} {`succ i}
  StepE : r {E} {i} -> P r {O} {`succ i}
    deriving fixpoint Proof
    
flop x = 
   mcata {{t} {i} . Proof {`flip t} {`succ i}} x    
     with  f Base = stepE base
           f (StepO p) = (stepE(f p))
           f (StepE p) = stepO(f p)    