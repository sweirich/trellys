
plus x y = mcata x with
  pl Zero = y
  pl (Succ m) = succ(pl m)

data V: * -> (Nat -> *) -> Nat -> * where
  Vnil: V a r {`zero}
  Vcons: a -> r {n} -> V a r {`succ n}
    deriving fixpoint Vector


v2 = vcons 3 (vcons 5 vnil)


appendV xs = mcata{ {i} . Vector a {j} -> Vector a {`plus i j}} xs
  with app Vnil ys = ys
       app (Vcons x xs) ys = checkT (vcons x (app xs ys))

