
max x = mprim x with
         r castX Zero y = y
         r castX (Succ n) y = 
            mprim y with
             f castY Zero = succ(castX n)
             f castY (Succ a) = succ(r n (castY a))  
                          
{-                         
n1 = succ zero
n2 = succ n1
n3 = succ n2
n4 = succ n3
n5 = succ n4

-}

data T: (Nat -> *) -> Nat -> * where
  Integer: T r {`zero} 
  Arr: r {i} -> r {j} -> T r {`succ(`max i j)}
    deriving fixpoint Ty

data Lam: ({Ty {i}} -> *) -> {Ty {i}} -> * where
  Const: Int -> Lam r {`integer}
  App: r {`arr a b} -> r {a} -> Lam r {b}
  Abs: (r {a} -> r {b}) -> Lam r {`arr a b}


{-

  ((call    : forall r i . r i -> ans {i}) -> 
   (cast    : forall r i . (i < j) => r {i} -> mu F {i}) ->
   (uncast  : forall r i . (i < j) => mu F {i} -> r {i}) ->
   (inv     : forall r i . ans i -> r i) ->
   (forall r . F r j -> ans j))
   -> mu F j -> ans j


data Lam: (* -> *) -> * -> * where
  Const: Int -> Lam r Int
  App: r (a -> b) -> r a -> Lam r b
  Abs: (r a -> r b) -> Lam r (a -> b)
    deriving fixpoint Exp

-- Exp = mu[* -> *] Lam

data Id x = Id x
unId (id x ) = x

eval:: Exp a -> Id a
eval x = mend{ i -> i } x 
  call cast uncast inv (Cont n) = Id n
  call cast uncast inv (Abs f) = Id(\ v ->  call (f(inv (Id v))) )
  call cast uncast inv (App f x) = Id (unId (call f)) (unId (call x))


data V :: * -> * where
  Vfun :: (V a -> V b) -> V (a -> b)
  Vnat :: Int -> V Int
    deriving fixpoint Value
    
apV :: Value (a -> b) -> Value a -> Value b
needs cast uncast stuff

eval :: Lam a -> V a
eval (Val i)     = Vnat i
eval (App e1 e2) = apV (eval e1) (eval e2)
eval (Abs e)     = Vfun (\x -> eval (e x)
    




-}
