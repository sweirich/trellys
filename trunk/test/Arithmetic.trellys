module Arithmetic where

import Prelude

plus : Nat -> Nat -> Nat
recnat plus n = \m .
  case n [cw] of
    Zero -> m
    Succ pred -> Succ (plus pred [cw] m)


mult : Nat -> Nat -> Nat
recnat mult n = \m .
  case n [cw] of
    Zero -> Zero
    Succ pred -> plus m (mult pred [cw] m)


minus : Nat -> Nat -> Nat
recnat minus n = \m .
   case n [cn] of
     Zero -> Zero
     Succ pred -> case m [cm] of
                    Zero -> n
                    Succ mpred -> minus pred [cn] mpred

-- 'x > y'
gt : Nat -> Nat -> Bool
recnat gt x = \y.
   case x [xpf] of
        Zero    -> False
        Succ x' -> case y [_] of
                   Zero -> True
                   Succ y' -> gt x' [xpf] y' 
-- 'x < y'
lt : Nat -> Nat -> Bool
lt = \x.\y.gt y x

-- 'x >= y'
ge : Nat -> Nat -> Bool
ge = \x y . gt (Succ x) y

-- 'x <= y'
le : Nat -> Nat -> Bool
le = \x.\y.ge y x

-- 'x = y'
eq : Nat -> Nat -> Bool
eq = \x.\y.case (gt x y) [_] of
           False -> case (lt  x y) [_] of
                    False -> True
                    True -> False
           True  -> False

-- x != y
neq : Nat -> Nat -> Bool
neq = \x.\y.case (eq x y) [_] of
            True -> False
            False -> True

-- 'div' calculates ceiling(n/m+1)
prog div : Nat => Nat => Nat
rec div n = \m .
  case n [_] of
    Zero -> Zero
    Succ pred ->  let prog rc [_] = div (minus pred m) m in
                  Succ rc

minus_same_zero : (n : Nat) -> (minus n n = 0)
recnat minus_same_zero n =
    case n [n_eq] of
      Zero -> conv (join : (minus 0 0 = 0)) by
		  	 		    (sym Nat Nat n 0 n_eq) at
			   			  hole.(minus hole hole = 0)
							  -- minus n n = 0
      Succ pred ->

        let step [step_eq] =
         (join : (minus (Succ pred) (Succ pred)) = minus pred pred) in
				 -- minus (Succ pred) (Succ pred) = minus pred pred
        let ic [ic_eq] = minus_same_zero pred [n_eq] in
				-- minus pred pred = 0
				let tc [_] = trans [Nat] [Nat] [Nat]
                				   [minus (Succ pred) (Succ pred)]
                				   [minus pred pred]
                			           [0] [step] [ic] in
        -- minus (Succ pred) (Succ pred) = 0
				let [n_eq_sym] [n_eq_sym_eq] = sym Nat Nat n (Succ pred) n_eq in
				-- TODO: should really be an application of 'sym'
				conv tc
             by n_eq_sym
 				     at hole.(minus hole hole = 0)

-- n - 0 = n
lemma_minus_zero_id : (n : Nat) -> (minus n 0 = n)
lemma_minus_zero_id =
  \n . case n [eq_n] of 
    Zero -> conv (join 10 : minus 0 0 = 0) by (sym Nat Nat n 0 eq_n) at hole.(minus hole 0 = hole)
    Succ n' -> 
      conv (join 10 : minus (Succ n') 0 = Succ n')
        by (sym Nat Nat n (Succ n') eq_n)
	at hole.(minus hole 0 = hole)

-- (m + n) - m = n
lemma_minus_plus_id : (m : Nat) -> (n : Nat) -> ((minus (plus m n) m) = n)
recnat lemma_minus_plus_id m = \n .
  case m [m_eq] of
     Zero -> conv (conv lemma_minus_zero_id n by (join : n = plus 0 n) at hole.(minus hole 0) = n)
               by (sym Nat Nat m 0 m_eq)
               at hole.((minus (plus hole n) hole) = n)
     Succ m' -> let e1 [_] = (join : minus (plus (Succ m') n) (Succ m')
                                   = minus (plus m' n) m') in
                --                 = n    (by (a + b) - a = b)
                let e2 [_] = (conv e1 by (lemma_minus_plus_id m' [m_eq] n)
                             at h . minus (plus (Succ m') n) (Succ m') = h) in
                conv e2 by (sym Nat Nat m (Succ m') m_eq)
                at m. ((minus (plus m n) m) = n)

-- m*(n+1) / n = m
log div_mult : (m : Nat) -> (n : Nat) ->
    (div (mult m (Succ n)) n = m)
recnat div_mult m = \n .
  case m [m_eq] of
    Zero -> conv (join : div (mult Zero (Succ n)) n = Zero)
            by (sym Nat Nat m Zero m_eq)
            at m . div (mult m (Succ n)) n = m
               -- (S m' * S n) / n = (let r = ((n + (m' * S n)) - n) / n in S r)
    Succ m' -> let e1 [_]    = (join: div (mult (Succ m') (Succ n)) n =
                                      (let prog r [_] = div (minus (plus n (mult m' (Succ n))) n) n
                                       in Succ r))
               --                  = (let r = (m' * S n) / n in S r)    (by (a + b) - a = b)
               in let e2 [_] = conv e1 by (lemma_minus_plus_id n (mult m' (Succ n)))
                               at h . div (mult (Succ m') (Succ n)) n =
                                      (let prog r [_] = div h n
                                       in Succ r)
               --                  = (let r = m' in S r)                (by IH)
               in let e3 [_] = conv e2 by (div_mult m' [m_eq] n)
                               at h . div (mult (Succ m') (Succ n)) n =
                                      (let prog r [_] = h
                                       in Succ r)
               --                  = S m'
               in let e4 [_] = conv e3
                               by (join : (let prog r [_] = m' in Succ r) = Succ m')
                               at h . div (mult (Succ m') (Succ n)) n = h
               in conv e4 by (sym Nat Nat m (Succ m') m_eq)
                  at m . (div (mult m (Succ n)) n) = m

plus_associates : (i:Nat) -> (j:Nat) -> (k:Nat) -> plus (plus i j) k = plus i (plus j k)
plus_associates = recnat pa i = \j k .
  case i [ieq] of
            -- `join` away `Zero`s on the left of `(+)`: (0+j)+k = j+k = 0+(j+k)
    Zero -> let [ieq'] [_] = sym Nat Nat i 0 ieq -- evidence of backwards equality. NC
            in conv (join 42 : plus (plus 0 j) k = plus 0 (plus j k)) by ieq'
                 at i . plus (plus i j) k = plus i (plus j k)

               -- associate `plus` in `Succ` of the inductive case: S ((i'+j)+k) = S (i'+(j+k))
    Succ i' -> let ih [_] = pa i' [ieq] j k
               in let e1 [p] = conv (join 0) by ih at h . Succ (plus (plus i' j) k) = Succ h

               -- move the `Succ` inside on the left: S ((i+j)+k) = ((S i)+j)+k
               in let [ieq'] [_] = sym Nat Nat i (Succ i') ieq -- evidence of backwards equality. NC
               in let e2 [_] = (join 42 : Succ (plus (plus i' j) k) = plus (plus (Succ i') j) k)
               in let e2' [_] = conv e2 by ieq' at h . Succ (plus (plus i' j) k) = plus (plus h j) k

               -- move the `Succ` inside on the right: S (i+(j+k)) = (S i)+(j+k)
               in let e3 [_] = (join 42 : Succ (plus i' (plus j k)) = plus (Succ i') (plus j k))
               in let e3' [_] = conv e3 by ieq' at h . Succ (plus i' (plus j k)) = plus h (plus j k)

               -- move the `Succ` inside both sides
               in conv (conv e1 by e2' at h . h = Succ (plus i' (plus j k))) by e3' at h . plus (plus i j) k = h

main : Nat
main = plus 2 3
