module OttAppend where

-------------------------------------------------------------------------
--- Can't import the prelude because it violates some of the OTT restrictions

data Bool -> Type 0 where
  True : Bool
  False : Bool


data Nat -> Type 0 where
    Zero : Nat
    Succ : (x : Nat) => Nat


log sym : (aTy : Type 0) -> (a : aTy) -> (b : aTy)  -> (p : a = b) -> (b = a)
sym = \ aTy a b p . 
           conv (join 1 : a = a) by p at x.x = a

log sym1 : (aTy : Type 1) -> (a : aTy) -> (b : aTy)  -> (p : a = b) -> (b = a)
sym1 = \ aTy a b p . 
           conv (join 1 : a = a) by p at x.x = a

log trans : (aTy : Type 0) -> (a : aTy) -> (b : aTy) -> (c : aTy) -> 
		   (p : a = b) -> (q : b = c) -> (a = c) 
trans = \ aTy a b c p q .
             conv join 0 
               by (conv p by q at h.a = h)
               at h.a = h

log trans4 : (aTy : Type 0) -> (a : aTy) -> (b : aTy) -> (c : aTy) -> (d : aTy) -> 
		   (p : a = b) -> (q : b = c) -> (r : c = d) -> (a = d) 
trans4 = \ aTy a b c d p q r .
            trans aTy a c d
              (trans aTy a b c p q) r


-- Existential types.

data Exists (a : Type 0) (p : (x:a) -> Type 0) -> Type 0 where
  Ex : [x : a] -> (witness : p x) -> Exists a p

-- Unit

data Unit -> Type 0 where
  U : Unit


-------------------------------------------------------------------------


-- Axioms about observational equivalence. These equalities cannot be proven in 
-- trellys, but they should be (?) consistent to add to the language. 

-- These axioms all have runtime arguments because we expect all equality 
-- proofs to be erased anyways.

-- We need the coherence axiom because we cannot use join to equate 
-- terms with different types. 
axiom log coh : (aTy : Type 0) -> (aTy' : Type 0) -> 
	       (a : aTy) ->
			 (p : aTy = aTy' ) -> 
			 (a = conv a by p at x . x)

-- Terms with Pi types

axiom log e0 : (a1 : Type 0) -> (b1 : ( x1 : a1) -> Type 0) -> (m1 : (x1 : a1) -> b1 x1) ->
	      (a2 : Type 0) -> (b2 : ( x2 : a2 ) -> Type 0) -> (m2 : (x2 : a2) -> b2 x2) -> 
			 (p : a1 = a2) ->
			 (q : (x1 : a1) -> (x2 : a2) -> (p : x1 = x2) -> (m1 x1 = m2 x2)) -> 
			 (m1 = m2)

axiom log e1 : (a1 : Type 0) -> (b1 : (x1:a1) -> Type 0) -> (m1 : (x1 : a1) -> b1 x1) ->
 	      (a2 : Type 0) -> (b2 : (x2:a2) -> Type 0) -> (m2 : (x2 : a2) -> b2 x2) -> 
			  (p : m1 = m2) ->
 			  a1 = a2

axiom log e2 : (a1 : Type 0) -> (b1 : (x1:a1) -> Type 0) -> (m1 : (x1 : a1) -> b1 x1) ->
 		     (a2 : Type 0) -> (b2 : (x2:a2) -> Type 0) -> (m2 : (x2 : a2) -> b2 x2) -> 
		     (p : m1 = m2) ->
			  (x1 : a1) -> (x2 : a2) -> (p : x1 = x2) -> (m1 x1 = m2 x2)

-- Pi types themselves

axiom log a0 : (a1 : Type 0) -> (b1 : (x1:a1) -> Type 0) -> 
		     (a2 : Type 0) -> (b2 : (x2:a2) -> Type 0) -> 
		  	  (p : a1 = a2) ->
			  (q : (x1 : a1) -> (x2 : a2) -> (p : x1 = x2) -> (b1 x1 = b2 x2)) -> 
			  ((x1 : a1) -> b1 x1) = ((x2 : a2) -> b2 x2)

axiom log a1 : (a1 : Type 0) -> (b1 : (x1:a1) -> Type 0) -> 
		     (a2 : Type 0) -> (b2 : (x2:a2) -> Type 0) -> 
			  (p : (x1 : a1) -> b1 x1 = (x2 : a2) -> b2 x2) ->
		  	  (a1 = a2) 

axiom log a2 : (a1 : Type 0) -> (b1 : (x1:a1) -> Type 0) -> 
		     (a2 : Type 0) -> (b2 : (x2:a2) -> Type 0) -> 
			  (p : ((x1 : a1) -> b1 x1) = (x2 : a2) -> b2 x2) ->
			  ((x1 : a1) -> (x2 : a2) -> (p : x1 = x2) -> (b1 x1 = b2 x2))

-- The above rules are not as useful as we want them to be because the RHS
-- of Pi types is often not written as (b1 x1) but as something
-- equivalent to that.  I think to do this rule justice we'll have to
-- actually add it to the type checker. In the meantime, we can
-- augment it by the following axiom that handles the non-dependent
-- case.
log const : (a1 : Type 0) -> (b1 : Type 0) -> 
		  ((x:a1) -> b1) = (x:a1) -> ((\x.b1 : (x:a1) -> Type 0) x)
const = \a1 b1 . join 


-- A few other extensionality axioms

-- Unit type

axiom log unit_eta : (x : Unit) -> (y : Unit) -> (x = y)


-- Things with Sigma types

axiom log p0 : (a1 : Type 0) -> (b1 : ( x1 : a1) -> Type 0) -> 
		   (a2 : Type 0) -> (b2 : ( x2 : a2 ) -> Type 0) -> 
			(x1 : a1) -> (y1 : (x1:a1) -> b1 x1) -> 
			(x2 : a2) -> (y2 : (x2:a2) -> b2 x2) ->
			(p : x1 = x2) -> 
			(q : (x1:a1) -> (x2:a2) -> y1 x1 = y2 x2) ->
			(Ex [a1] [b1] [x1] (y1 x1) = Ex [a2] [b2] [x2] (y2 x2))
-- probably derivable from appcong below

-- (Not sure how to state the projection axioms)

-- Sigma types

-- Exists : (a : Type 0) -> (b : (x:a) -> Type 0) -> Type 0

axiom log s0 : (a1 : Type 0) -> (b1 : (x1:a1) -> Type 0) -> 
		   (a2 : Type 0) -> (b2 : (x2:a2) -> Type 0) -> 
		  	(p : a1 = a2) ->
			(q : (x1 : a1) -> (x2 : a2) -> (p : x1 = x2) -> (b1 x1 = b2 x2)) -> 
			(Exists a1 b1 = Exists a2 b2)
-- probably derivable from appcong

axiom log s1 : (a1 : Type 0) -> (b1 : (x1:a1) -> Type 0) -> 
		     (a2 : Type 0) -> (b2 : (x2:a2) -> Type 0) -> 
			  (p : Exists a1 b1 = Exists a2 b2) ->
		  	  (a1 = a2) 
-- not derivable b/c requires injectivity

axiom log s2 : (a1 : Type 0) -> (b1 : (x1:a1) -> Type 0) -> 
		     (a2 : Type 0) -> (b2 : (x2:a2) -> Type 0) -> 
			  (p : Exists a1 b1 = Exists a2 b2) ->
			  ((x1 : a1) -> (x2 : a2) -> (p : x1 = x2) -> (b1 x1 = b2 x2))



---------------------------------------------------------------------
---------------------------------------------------------------------
--- Some examples of what we can do with these axioms
---------------------------------------------------------------------

-- Application congruence - homogeneous

log appcong : (a : Type 0) -> (b : (x:a) -> Type 0) ->
		    (m1 : (x:a) -> b x) -> (n1 : a) -> 
			 (m2 : (x:a) -> b x) -> (n2 : a) -> 
          (p1 : m1 = m2) -> (p2 : n1 = n2) ->
			 (m1 n1 = m2 n2) 
appcong = \ a b m1 n1 m2 n2 p1 p2 . e2 a b m1 a b m2 p1 n1 n2 p2
		
-- Application congruence - heterogeneous

log appconghet : (a1 : Type 0) -> (b1 : (x:a1) -> Type 0) ->
              (a2 : Type 0) -> (b2 : (x:a2) -> Type 0) ->
		    (m1 : (x:a1) -> b1 x) -> (n1 : a1) -> 
			 (m2 : (x:a2) -> b2 x) -> (n2 : a2) -> 
          (p1 : m1 = m2) -> (p2 : n1 = n2) ->
			 (m1 n1 = m2 n2) 
appconghet = \ a1 b1 a2 b2 m1 n1 m2 n2 p1 p2 . e2 a1 b1 m1 a2 b2 m2 p1 n1 n2 p2

-- Simplified version of extensionality for homogenous equality

log e0' : (a1 : Type 0) -> (b1 : (x1 : a1) -> Type 0) -> 
	       (m1 : (x1 : a1) -> b1 x1) ->
		    (m2 : (x1 : a1) -> b1 x1) -> 
			 (q : (x1 : a1) -> (m1 x1 = m2 x1)) -> 
			 (m1 = m2)
e0' = \ a1 b1 m1 m2 q. e0 a1 b1 m1 a1 b1 m2 (join 0) 
	      (\ x1 x2 p . 
            conv (q x1) by p at x. m1 x1 = m2 x)
           


-- Eta equivalence for functions

log eta :  (a : Type 0) -> (b : (x:a) -> Type 0) ->
		     (f : (x:a) -> b x) -> (x : a) -> 
			  f = (\ x . f x : (x:a) -> b x)
eta = \ a b f x . 
   e0' a b f (\x.f x :(x:a) -> b x) 
	   (\ x1 . join 1)

-- Yet more simplfied for non-dependent functions

log e0'' : (a : Type 0) -> (b : Type 0) -> 
	        (m1 : (x1 : a) -> b) ->
		     (m2 : (x1 : a) -> b) -> 
		 	  (q : (x1 : a) -> (m1 x1 = m2 x1)) -> 
			  (m1 = m2)

{-	    trans4' ((x1 : a1) -> b1)
		         ((x1 : a1) -> ((\x.b1 : (x:a1) -> Type 0) x1))
		         ((x1 : a1) -> ((\x.b1 : (x:a1) -> Type 0) x1))
					((x1 : a1) -> b1)
		     m1
		     (conv m1 by (const a1 b1) at x.x)
			  (conv m2 by (const a1 b1) at x.x)
			  m2
			  (join 0)
	        (e0' a1 (\x . b1 : (x:a1) -> Type 0)
	           (conv m1 by (const a1 b1) at x.x)
			     (conv m2 by (const a1 b1) at x.x)
			     (\ x1 . 
  			       trans4' ((\x.b1 : (x:a1) -> Type 0) x1) b1 b1 
				          ((\x.b1 : (x:a1) -> Type 0) x1)
			          ((conv m1 by (const a1 b1) at x.x) x1)
						 (m1 x1)
						 (m2 x1)
						 ((conv m2 by (const a1 b1) at x.x) x1)
						 (join 0)
						 (q x1)
						 (join 0)))
            (join 0)
-}
					 	    
{-


log bad : (\x . 1 : (x:Nat) -> Nat) = (\x . 0 : (x:Nat) -> Nat) 
bad = trans4' ((x:Nat) -> Nat)
	    		  ((x:1=0) -> Nat)
				  ((x:1=0) -> Nat)
				  ((x:Nat) -> Nat)
		    (\x . 1 : (x:Nat) -> Nat) 
		    (\x . 1 : (x:1=0) -> Nat) 
			 (\x . 0 : (x:1=0) -> Nat)
		    (\x . 0 : (x:Nat) -> Nat) 				  
     (join 0)
	  (e0'' (1 = 0) 
	        Nat
	        (\x. 1 : (x:1=0) -> Nat)
			  (\x. 0 : (x:1=0) -> Nat)
			  (\p. contra p))
     (join 0)

-- An example of reasoning under a binder

log example : (\x. plus (plus x x) x : (x:Nat) -> Nat) = 
              (\x. plus x (plus x x) : (x:Nat) -> Nat)

example = e0'' Nat Nat
		        (\x. plus (plus x x) x : (x:Nat) -> Nat)
		        (\x. plus x (plus x x) : (x:Nat) -> Nat)
				  (\x. trans4' Nat Nat Nat Nat
				       ((\x. plus (plus x x) x : (x:Nat) -> Nat) x)
				       (plus (plus x x) x)
						 (plus x (plus x x))
						 ((\x. plus x (plus x x) : (x:Nat) -> Nat) x)
						 (join 1 0)
						 (plus_associates x x x)
                   (join 0 1)
						 )
-}
-----------------------------------------------------------
-- OTT style Append associates.
-----------------------------------------------------------

plus : (n : Nat) -> (m : Nat) -> Nat
recnat plus n = \m .
  case n [cw] of
    Zero -> m
    Succ pred -> Succ (plus pred [cw] m)

-- Decidable equality for natural numbers
-- 'x = y'
eq : (x:Nat) -> (y:Nat) -> Bool
recnat eq x = \y. 
  case x [xpf] of 
     Zero -> case y [ypf] of 
                 Zero -> True
                 Succ y' -> False

     Succ x' -> case y [ypf] of 
                 Zero -> False
                 Succ y' -> eq x' [xpf] y' 


-- x != y
neq : (x:Nat) -> (y:Nat) -> Bool
neq = \x.\y.case (eq x y) [eqpf] of
            True -> False
            False -> True

plus0 : [n:Nat] -> n = plus 0 n 
plus0 = \[n] . join 3

plusSucc : [n:Nat] -> [m:Nat] -> Succ (plus n m) = plus (Succ n) m
plusSucc = \[n] [m] . join 42

data Vector [a : Type 0] [n : Nat] -> Type 0 where
   VNil  : [pf : n = 0] -> Vector a n
   VCons : [size : Nat] -> [pf : n = Succ size]
        -> (x:a) -> (xs : Vector a size) -> Vector a n

-- hole : (a : Type 0) -> a

-- A proof that VCons is injective

log consinj : (a : Type 0) -> (n:Nat) -> (m : Nat) -> (x:a) -> (y:a) -> 
	 (xs:Vector a n) -> (ys: Vector a m) -> 
	 (eq : VCons [a][Succ n][n][join 0] x xs = VCons [a][Succ m][m][join 0] y ys) -> 
	 (xs = ys)
{-
consinj = \ a n x y xs ys eq. 
		       let x1 [px1] = VCons [a][Succ n][n][join 0] x xs in
		       conv (join 0 : case x1 [px] of 
				                VNil [n0] -> xs
							       VCons [n'][neq] x' xs' -> xs' =
                           case x1 [px] of 
				                VNil [n0] -> xs
							       VCons [n'][neq] x' xs' -> xs') by eq at 
									   (x. case x [px] of 
  				                    VNil [n0] -> xs
							           VCons [n'][neq] x' xs' -> xs')
-}

-- A proof that equal vectors imply equal types

{-
log eqvec : (a : Type 0) -> [n:Nat] -> [m:Nat] ->  (xs : Vector a n) -> (ys : Vector a m) -> 
    (eq : xs = ys) -> (n = m)
eqvec = \a . recnat eqv [n] = \ [m] xs ys eq .
  case xs [pxs] of 
    VNil [n0] -> case ys [pys] of 
                     VNil  [m0] -> conv n0 by (sym Nat m 0 m0) at x. n = x 
                     VCons [m'] [meq] y' ys' -> 
                        contra (conv eq by pxs, pys at xs ys. xs = ys)
    VCons [n'] [neq] x' xs' -> case ys [pys] of 
                     VNil  [meq] -> 
                        contra (conv eq by pxs, pys at xs ys. xs = ys)
                     VCons [m'][meq] y' ys' -> 							  
                        -- p1 : n' = m' 
							   let p1 [p1eq] = eqv [n'] [m'] xs' ys' (consinj a n' m' x' y' xs' ys') in 
								-- neq : n = Suc n'
								-- meq : m = Suc m'
								let p2 [p2eq] = conv (join 0) by p1 at x . Suc n' = Suc x in
								conv p2 by (Sym Nat neq) , (Sym Nat meq) at x1 x2 . x1 = x2 
-}
                     


append : [a: Type 0] -> [n:Nat] -> [m:Nat] -> (xs:Vector a n) -> (ys:Vector a m) -> Vector a (plus n m)
append = \[a] . recnat app [n] = \[m] . \xs ys .
  case xs [p] of
    VNil [neq] -> 
      let [neq'] [p] = (sym Nat n 0 neq) in -- evidence of backwards equality. NC
      conv (conv ys by (plus0 [m]) at x.Vector a x) by neq' at h.Vector a (plus h m)
    VCons [n'] [neq] x xs' -> 
      let xs'ys [p] = app [n'] [neq] [m] xs' ys in
      let xsys [p] = VCons [a] [Succ (plus n' m)] [plus n' m] [join 42] x xs'ys in
      let xsys' [p] = conv xsys by (plusSucc [n'] [m]) at h.Vector a h in
      let [neq'] [p] = (sym Nat n (Succ n') neq) in -- evidence of backwards equality. NC
      conv xsys' by neq' at h.Vector a (plus h m)


{-
appendAssociates : [a: Type 0] -> [i:Nat] -> [j:Nat] -> [k:Nat] 
                   -> [xs:Vector a i] -> [ys:Vector a j] -> [zs:Vector a k] 
                   -> append [a] [plus i j] [k] (append [a] [i] [j] xs ys) zs 
                    = append [a] [i] [plus j k] xs (append [a] [j] [k] ys zs)
appendAssociates = \[a] . recnat aa [i] = \[j] [k] [xs] [ys] [zs] .
  case xs [xseq] of
     VNil [ieq] -> 
-}
	      {- VNil: app (app Nil ys) zs = app ys zs
                                      = app Nil (app ys zs) -}


-- A simple example of using axiom a0, demonstrating that we can reduce redexes under Pis.
{-
log v : (n : Nat) -> Type 0
v = Vector Nat 

log thm : (n : Nat)  -> (m : Nat) -> (p : n = m) ->
            ((x:Nat) -> v (plus x n)) = ((x:Nat) -> v (plus x m))
thm = \ n m p .
  conv
    a0 Nat (\x . v (plus x n) : (x:Nat) -> Type 0) 
       Nat (\x . v (plus x m) : (x:Nat) -> Type 0) 
       (join)
       (\ x1 x2 p' . conv (join :((\x . v (plus x n) : (x:Nat)->Type 0) x1) = ((\x . v (plus x n) : (x:Nat)->Type 0) x1))
                      by p, p'
                      at h1 h2. ((\x . v (plus x n) : (x:Nat)->Type 0) x1) = ((\x . v (plus x h1) : (x:Nat)->Type 0) h2))
    by (join : ((x1 : Nat) -> (\ x . v (plus x n) : (x:Nat) -> Type 0) x1)
              =((x : Nat) -> v (plus x n))),
       (join : ((x2 : Nat) -> (\ x . v (plus x m) : (x:Nat) -> Type 0) x2)
              =(((x : Nat) -> v (plus x m))))
    at h1 h2. h1 = h2
-}