module ProgList where

import Prelude

-- pragrammatic list whose elelments are logical
data List [a : Type 0] -> Type 0 where
  Nil : List a
  Cons : (x:a) -> (xs:List a) => List a

-- programmatic map
prog map : [a : Type 0] -> [b : Type 0] -> (f : (x:a) -> b) -> (xs:List a) => List b
map = \ [a] . \ [b] . \ f .
  rec map' xs = case xs [xs_eq] of
                  Nil       -> Nil [b]
                  Cons y ys -> let y1 [yy] = f y in
                                 let prog ys1 [yys] = map' ys in
                                   Cons [b] y1 ys1

prog x : List Nat
x = map [Nat] [Nat] (\ x . Succ x ) (Cons [Nat] 0 (Cons [Nat] 1 (Nil [Nat])))


prog foldr : [a : Type 0] -> [b : Type 0] ->
             (f:(x:a) -> (y:b) => b) -> (z:b) -> (l:List a) => b
foldr = \ [a] . \ [b] . \ f . \ v0 .
  rec foldr' xs = case xs [xs_eq] of
                   Nil       -> v0
                   Cons y ys -> let prog ys1 [yys] = foldr' ys in
                                  f y ys1


data Fix [f : (a:Type 0) -> Type 0] -> Type 0 where
  In : (x: f (Fix f)) -> Fix f

data L [a:Type 0] [c:Type 0] -> Type 0 where
  N : L a c
  C : (x:a) -> (y:c) -> L a c


nil : [a:Type 0] -> Fix (L a)
nil = \ [a] . In [L a] (N [a] [Fix (L a)])

cons : [a:Type 0] -> (x:a) -> (xs:Fix (L a)) -> Fix (L a)
cons = \ [a] . \ x . \ xs . In [L a] (C [a] [Fix (L a)] x xs)

l1 : Fix (L Nat)
l1 = nil [Nat]

l2 : Fix (L Nat)
l2 = cons [Nat] 0 l1

-- TODO mcata 

