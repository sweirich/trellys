module StrongNat where

import Prelude
import Arithmetic
import LessThanNat
import LessThanNat_lt_eq_True -- ??? I guess trellys imports are not transitive ???

-- * Strong induction
--   ----------------

-- Strong elimination / course-of-values (cov) induction / structural
-- induction: allows recursion on any structural subterm, not just the
-- predecessor.
--
--   cov : [p:Nat -> Type 0]
--      -> ((n:Nat) -> ((m:Nat) -> [m < n] -> p m) -> p n)
--      -> ((n:Nat) -> p n)

-- The index trick used to implement cov
-- -------------------------------------
--
-- This cov implementatoin depends on a (general) index trick [1] that
-- captures the relation between weak and strong recursion.  You use
-- cov when you want to write a recursive function r from Nat to some
-- rng type T
--
--   r : (n:Nat) -> T
--
-- where (r n) may recurse on values smaller than (pred n), and so
-- weak recursion won't work.  The /index trick/ is to instead define
-- an r' by weak induction on i
--
--   r' : [i:Nat] -> (n:Nat) -> [n < i] -> T
--
-- where i is a dummy index used to make the weak induction work.
-- Then r is defined in terms of r' by
--
--   r = \n . r' [S n] n [proof that n < S n]
--
-- So, how does r' work?  Well, since we assume that whenever (r n)
-- recurses, say on n', that n' is less than n, say
--
--   r n = ... r n' and n' < n ...
--
-- we can make (r' [i] n [_]) recurse on a proof that n' < pred i,
-- since integer less-than satisfies a strong transitivity law
--
--   n' < n /\ n < i -> n' < pred i
--
-- I.e., r' is defined by
--
--   r [i] n [i_lt_n] = ... r' [pred i] n' [proof that n' < pred i from n' < n at n < i] ...
--
-- where the "..." is same as in r.
--
-- [1] like dummy Nat indices on datatypes as suggested by Aaron to
--     work around the fact that we don't generate induction
--     principles for each datatype.

-- How the index trick is used in cov
-- ----------------------------------
--
-- Recall the type of cov
--
--   cov : [p:Nat -> Type 0]
--      -> ((n:Nat) -> ((m:Nat) -> [m < n] -> p m) -> p n)
--      -> ((n:Nat) -> p n)
--
-- The second argument, f say, is a recursive template [2]
--
--   f : (n:Nat) -> ((m:Nat) -> [ltT m n] -> p m) -> p n
--
-- and f's second argument, gn say, is the recursion
--
--   gn : (m:Nat) -> [ltT m n] -> p m
--
-- The strategy of cov is to build the recursion gn and pass it to f
-- to compute (p n).  The obvious approach is to define
--
--   g : (n:Nat) -> (m:Nat) -> [ltT m n] -> p m
--
-- by recursion on n and hence gn is (g n).  That was my first
-- approach (commented out below), but my implementation had to case
-- match on the less-than proof, meaning the less-than proof would
-- have to made run-time [3], which is sloppy.
--
-- The index trick provides a better version of g.  We instead define
-- g by recursion on a dummy index i
--
--   g : [i:Nat] -> (n:Nat) -> [ltT n i] -> ((m:Nat) -> [ltT m n] -> p m)
--
-- where gn is (g _ n _).  The implementation of g is easy.  Roughly
--
--   g = \[i] n [n_lt_i] m [m_lt_n] .
--       f m (g [pred i] m [proof that m < pred i])
--
-- or erased, roughly
--
--   |g| = \n m . |f| m (|g| m)
--
-- which is quite nice :)
--
-- [2] cf. the recursive templates of type ((a -> b) -> (a -> b))
--     passed to a Y-combinator).  For cov we have, roughly, a
--     template of type (a -> (a -> b) -> b), and this connection is
--     explored next.
--
-- [3] Like eliminating Prop to produce Set in Coq, which is not
--     allowed there for the same reason my first cov implementation
--     doesn't type check when the less-than proofs are erased.

-- Our cov corresponds to (Y o flip) in LC
-- ---------------------------------------
--
-- cov erases to
--
--   sn := |cov| = \ f . let g = (rec g . \ n . \ m . f m (g m))
--                       in                     \ n . f n (g n)
--
-- which is "equivalent", as an untyped lambda term, to
--
--   Y o flip
--
-- for (o) = compose.
--
-- This is not surprising: strong elimination takes an f of the form
--
--   f := \ n g . body g,
--
-- where g is used in recursive positions in body, and produces a
-- version of f that calls itself recursively, i.e.
--
--   sn f = \ n . body (sn f)
--
-- Hence
--
--   sn f = Y (\ g n . body g)
--        = Y (flip (\ n g . body g))
--        = Y (flip f)
--
-- Details for the above term sn: let
--
--   Y g   = g (Y g) -- E.g. \g . U (g o U), for U g = g g
--   K x y = x
--
-- then we can rewrite sn as
--
--   \ f . let g = \g . K (\ m . f m (g m))
--         in              \ n . f n (Y g n)
--
-- where
--
--   \ n . f n (Y g n) =   \ n . f n (g (Y g) n)
--                     =   \ n . f n (\ m . f m (Y g m))
--                     =   flip f    (\ m . f m (Y g m))
--
-- and so \n . f n (Y g n) is a fixed point of flip f, and so,
-- assuming the equivalence of fixed points, we get
--
--   sn = Y o flip.
cov : [p:Nat -> Type 0]
   -> ((n:Nat) -> ((m:Nat) -> [ltT m n] -> p m) -> p n)
   -> ((n:Nat) -> p n)
cov = \[p] f .
  -- g _ n _ : (m:Nat) -> LT m n -> p m, and so proves p n via f
  let g [_] = ((recnat g [i] = \n [n_lt_i] m [m_lt_n] .
    let [i_eq] [_]    = m_lt_n__n_eq_SPn n i n_lt_i in       -- i = S (pred i)
    let [m_lt_i'] [_] = lt_trans_pred m n i m_lt_n n_lt_i in -- m < pred i
    f m (g [pred i] [i_eq] m [m_lt_i'])
           ): [i:Nat] -> (n:Nat) -> [ltT n i] -> ((m:Nat) -> [ltT m n] -> p m))
  in \n . f n (g [Succ n] n [m_lt_Sm n])

{- And here's the first version of StrongNat.

   It's totally broken as is, because it cases on the erased LT proof
   (like eliminating Prop to produce Set in Coq).  Making the LT proof
   run-time should fix it, but the above second version is much nicer.

-- Strong elimination / course-of-values induction / structural
-- induction: allows recursion on any structural subterm, not just the
-- predecessor.
strongNat : [p:Nat -> Type 0]
         -> ((n:Nat) -> ((m:Nat) -> [LT m n] -> p m) -> p n)
         -> ((n:Nat) -> p n)
strongNat = \[p] f .
  -- g n : (m:Nat) -> LT m n -> p m, and so proves p n via f
  let g [_] = ((recnat g n = case n [eq_n] of
    -- m < 0, a contradiction
    Zero    -> \m [lt_p] .
      poe [p m] [lt_0__F [m] [conv lt_p by eq_n at h.LT m h]]
    -- m < S n' -> m < n' \/ m = n'
    Succ n' -> \m [lt_p] .
      case (lt__lteq [m] [n'] [conv lt_p by eq_n at h.LT m h]) [_] of
        -- m < n', so g n' recursively proves p m
        InL lt_p'  -> g n' [eq_n] m [lt_p']
        -- n' = m, so f proves p m via g n'
        InR n_eq_m -> (conv (f n' (g n' [eq_n])) by n_eq_m at h.p h)
           -- this is g's type annotation, is there a better way to do
           -- this?
           ): (n:Nat) -> ((m:Nat) -> [LT m n] -> p m))
  in \n . f n (g n)
-}

-- * Logical division
--   ----------------

-- cf. Arithmetic.div
--
-- m `cdiv` n = \ceiling{ m / S n }

-- Define the predicate here to avoid need for let defs in context
cdiv_p : Nat -> Type 0
cdiv_p = \w.Nat  -- NatElimination.constNat

cdiv : Nat -> Nat -> Nat
cdiv = \m n .
       let f [f_def] = ((\m g . case m [m_eq] of
         Zero    -> conv Zero by (join : Nat = cdiv_p m) at h.h
         Succ m' -> let [lt_p] [_] = conv (s_minus_s__lt m' n)
                                   by (sym Nat Nat m (Succ m') m_eq)
                                   at m.ltT ((minus (Succ m') (Succ n))) m in
                    let recg [_] = conv (g (minus (Succ m') (Succ n)) [lt_p])
                                   by (join : cdiv_p (minus (Succ m') (Succ n)) = Nat)
                                   at h.h in
                    conv (Succ recg) by (join : Nat = cdiv_p m) at h.h
                   ) : ((m:Nat) -> ((m_minus_sn:Nat) -> [ltT (m_minus_sn) m] -> cdiv_p m_minus_sn) -> cdiv_p m))
       in conv (cov [cdiv_p] f m) by (join : cdiv_p m = Nat) at h.h

-- Tests
test_cdiv1 : cdiv 0 0 = 0
test_cdiv1 = join

test_cdiv2 : cdiv 1 0 = 1
test_cdiv2 = join

test_cdiv3 : cdiv 10 1 = 5
test_cdiv3 = join 1000

test_cdiv4 : cdiv 10 2 = 4
test_cdiv4 = join

test_cdiv5 : cdiv 10 3 = 3
test_cdiv5 = join

