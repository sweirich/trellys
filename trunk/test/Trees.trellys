module Trees where

import Prelude

data List (a : Type 0) -> Type 0 where
  Nil 
  Cons of (x:a) (xs:List a)

data Rose (a : Type 0) -> Type 0 where
  ForkR of (x:a)  (r:List (Rose a))

data Pair (a : Type 0) (b : Type 0) -> Type 0 where
  Prod of (x:a)  (y:b)

-- data Bin (a : Type 0) -> Type 0 where
--   ForkB of (x:a) (Bin (Pair a a))  (Bin a)


