module Vectors where

import Prelude

data Vector [a : Type 0] [n : Nat] -> Type 0 where
   VNil  : [n = 0] -> Vector a n
   VCons : [size : Nat] -> [n = Succ size]
        -> (x:a) -> (xs : Vector a size) -> Vector a n

-- not needed:
-- hole : (a : Type 0) -> a

-- terminating recursor for the vector type
recvec : [a : Type 0] -> [c : [n : Nat] -> (v:Vector a n) -> Type 0] ->
         (base : [n:Nat] -> [n_eq:n = 0] -> (c [n] (VNil [a] [n] [n_eq]))) ->
         (step : [n:Nat] -> [n':Nat] -> [n_eq:n = Succ n'] -> (x:a) -> (xs : Vector a n') -> (ih : c [n'] xs) ->
                 c [n] (VCons [a] [n] [n'] [n_eq] x xs)) ->
         [n:Nat] -> (v:Vector a n) -> (c [n] v)
recvec = \ [a] . \ [c] . \ base . \ step .
           ind recvec[n] = \ v .
             case v [v_eq] of
               VNil [n_eq] -> 
 
                 conv base [n] [n_eq] by sym (Vector a n) (Vector a n) v (VNil [a] [n] [n_eq]) v_eq
                 at x.(c [n] x)
                
                      
               VCons [n'] [n_eq] x xs ->
	         conv step [n] [n'] [n_eq] x xs (recvec [n'] [ord n_eq] xs)
                 by sym (Vector a n) (Vector a n) v (VCons [a] [n] [n'] [n_eq] x xs) v_eq
                 at x.(c [n] x)


vmap : [a : Type 0] -> [b : Type  0] -> ((x:a) -> b) ->
      [n : Nat] -> (xs : Vector a n) -> Vector b n
vmap = \ [a] . \ [b] . \ f . ind vmap [n] = \ xs .
        case xs [xs_eq] of
          VNil [n_eq] -> VNil [b] [n] [n_eq]
          VCons [n'] [n_eq] x xs -> VCons [b] [n] [n'] [n_eq] (f x) (vmap [n'] [ord n_eq] xs) 
