module Append2 where

import Prelude
import Vectors
import Arithmetic

append : [a: Type 0] => [n:Nat] => [m:Nat] => (xs:Vector a n) -> (ys:Vector a m) -> Vector a (plus n m)
append = \[a] . ind app [n] = \[m] . \xs ys .
  case xs [p] of
    VNil [neq] ->
      let _ = (join : m = plus 0 m) in 
      ys
    VCons [n'] [neq] x xs' -> 
      let _ = (join : Succ (plus n' m) = plus (Succ n') m) in
      VCons [_] [_] x (!app [n'] [ord neq] [m] xs' ys)


appendAssociates : [a: Type 0] -> [i:Nat] -> [j:Nat] -> [k:Nat]
                   -> (xs:Vector a i) -> (ys:Vector a j) -> (zs:Vector a k)
                   -> append (append xs ys) zs
                    = append xs (append ys zs)

appendAssociates = \[a] . ind aa [i] = \[j] [k] xs ys zs .
  case xs [xseq] of
    VNil [ieq] ->  
      let _ = (join : append (VNil [ieq]) ys = ys) in     
      let [rhs] [rhs_eq] = (append ys zs) in
      let _ = (join : append (VNil [ieq]) rhs = rhs) in
      _
      
    VCons [i'] [ieq] x xs' -> 
      let ih [p] = aa [i'] [ord ieq] [j] [k] xs' ys zs in
      let v1 [v1_eq] = (append (VCons [i'] [ieq] x xs') ys) in
      let v2 [v2_eq] = (append xs' ys) in 
      let v3 [v3_eq] = (append ys zs) in   
      
      let _  = (join : (append (VCons [i'] [ieq] x xs') ys) = 
                       (VCons [_] [_] x (append xs' ys))) in

      let _ = (join : (append (VCons [i'] [ieq] x xs') v3) = 
      	              (VCons [_] [_] x  (append xs' v3))) in
      
      let _ = (join : (append (VCons [_] [_] x v2) zs) =
                           (VCons [_] [_] x (append v2 zs))) in      
       _


