module Arithmetic where

import Prelude

plus : Nat -> Nat -> Nat
ind plus n = \m .
  case n [cw] of
    Zero -> m
    Succ pred -> Succ (plus pred [ord cw] m)


mult : Nat -> Nat -> Nat
ind mult n = \m .
  case n [cw] of
    Zero -> Zero
    Succ pred -> plus m (mult pred [ord cw] m)


minus : Nat -> Nat -> Nat
ind minus n = \m .
   case n [cn] of
     Zero -> Zero
     Succ pred -> case m [cm] of
                    Zero -> n
                    Succ mpred -> minus pred [ord cn] mpred

-- 'x > y'
gt : Nat -> Nat -> Bool
ind gt x = \y.
   case x [xpf] of
        Zero    -> False
        Succ x' -> case y of
                   Zero -> True
                   Succ y' -> gt x' [ord xpf] y' 
-- 'x < y'
lt : Nat -> Nat -> Bool
lt x y = gt y x

-- 'x >= y'
ge : Nat -> Nat -> Bool
ge x y = gt (Succ x) y

-- 'x <= y'
le : Nat -> Nat -> Bool
le = \x.\y.ge y x

-- 'x = y'
eq : Nat -> Nat -> Bool
eq x y = if (gt x y) 
         then not (lt x y) 
         else False

-- x != y
neq : Nat -> Nat -> Bool
neq x y = not (eq x y) 

minus_same_zero : (n : Nat) -> (minus n n = 0)
ind minus_same_zero n =
    case n [n_eq] of
      Zero -> (join : minus 0 0 = 0)
      Succ pred ->
        let _ = (join 20 : (minus (Succ pred) (Succ pred)) = minus pred pred) in
          minus_same_zero pred [ord n_eq]

-- n - 0 = n
lemma_minus_zero_id : (n : Nat) -> (minus n 0 = n)
lemma_minus_zero_id =
  \n . case n [eq_n] of 
    Zero -> (join : minus 0 0 = 0)
    Succ n' -> (join 10 : minus (Succ n') 0 = Succ n')

-- n + 0 = n
prog lemma_plus_zero_id : (n : Nat) -> (plus n 0 = n)
rec lemma_plus_zero_id n =
 case n [eq_n] of 
    Zero -> unfold (plus 0 0) in _
    Succ n' -> let _ = (join : plus (Succ n') 0 = Succ (plus n' 0)) in
	            let prog _ = lemma_plus_zero_id n'
					in _ 

-- (m + n) - m = n
lemma_minus_plus_id : (m : Nat) -> (n : Nat) -> ((minus (plus m n) m) = n)
ind lemma_minus_plus_id m = \n .
  case m [m_eq] of
     Zero -> let _ = (join : n = plus 0 n) in
              lemma_minus_zero_id n
     Succ m' ->  let _ = (join : (plus (Succ m') n) = Succ (plus m' n)) in
                 let [plus_m'_n] = plus m' n in
                 let _ = (join : minus (Succ plus_m'_n) (Succ m')
                                = minus plus_m'_n m') in
                 (lemma_minus_plus_id m' [ord m_eq] n)


plus_associates : (i:Nat) -> (j:Nat) -> (k:Nat) -> plus (plus i j) k = plus i (plus j k)
plus_associates = ind pa i = \j k .
  case i [ieq] of
            -- `join` away `Zero`s on the left of `(+)`: (0+j)+k = j+k = 0+(j+k)
    Zero ->  let   [plus_j_k] = plus j k 
             in let _ =  (join : plus 0 plus_j_k = plus_j_k)
             in let _ =  (join : plus 0 j = j)
             in (_ : plus (plus 0 j) k = plus 0 (plus j k))
               -- associate `plus` in `Succ` of the inductive case: S ((i'+j)+k) = S (i'+(j+k))
    Succ i' -> let ih = pa i' [ord ieq] j k
               -- move the `Succ` inside on the left: S ((i+j)+k) = ((S i)+j)+k
               in let _  = (join : plus (Succ i') j = Succ (plus i' j))
               in let [plus_i'_j] = plus i' j
               in let _  = (join : plus (Succ plus_i'_j) k = Succ (plus plus_i'_j k))
--               in let e2 = (_ : Succ (plus (plus i' j) k) = plus (plus (Succ i') j) k)
               -- move the `Succ` inside on the right: S (i+(j+k)) = (S i)+(j+k)
               in let [plus_j_k] = plus j k
               in let _ = (join : plus (Succ i') plus_j_k = Succ (plus i' plus_j_k))
--               in let e3 = (_ : Succ (plus i' (plus j k)) = plus (Succ i') (plus j k))                  
               -- move the `Succ` inside both sides
               in (_ : (plus (plus i j) k) = (plus i (plus j k)))


main : Nat
main = plus 2 3
