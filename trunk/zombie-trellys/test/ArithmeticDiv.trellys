module ArithmeticDiv where 

{- The division function, and a proof about it.
   This is not the same definition of division as in ProgrammaticCDiv.trellys!
   So I split it out into a separate file. -}


import Prelude
import Arithmetic

-- 'div' calculates ceiling(n/m+1)
prog div : Nat -> Nat -> Nat
rec div n m =
  case n of
    Zero -> Zero
    Succ pred -> Succ (div (minus pred m) m)

-- m*(n+1) / n = m
log div_mult : (m : Nat) -> (n : Nat) ->
    (div (mult m (Succ n)) n = m)
ind div_mult m = \n .
  case m [m_eq] of
    Zero -> (join : div (mult Zero (Succ n)) n = Zero)
               -- (S m' * S n) / n = (let r = ((n + (m' * S n)) - n) / n in S r)
    Succ m' -> let _    = (join: mult (Succ m') (Succ n) =
                                 (plus (Succ n) (mult m' (Succ n)))) 
               in let [mult_m'_Sn] = mult m' (Succ n)
               in let _ = (join: plus (Succ n) mult_m'_Sn
	                       = Succ (plus n mult_m'_Sn))
               in let [plus_n__mult_m'_Sn] = plus n mult_m'_Sn
               in let _ = (join: div (Succ plus_n__mult_m'_Sn) n
                                 = Succ (div (minus plus_n__mult_m'_Sn n) n))
               in let _ = lemma_minus_plus_id n (mult m' (Succ n))
               in let IH = div_mult m' [ord m_eq] n
               in (_ : (div (mult m (Succ n)) n = m))
