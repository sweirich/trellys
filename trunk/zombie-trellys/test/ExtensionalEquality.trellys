-- Extensional equality and termination casts (up to extensionality)
-- for Nat -> Nat functions.
module ExtensionalEquality where

import Prelude

-- Dependent pair.  Like Exists in Prelude, except with both
-- components run-time (would sig or sigT be a better name?)
data Exists' (xTy:Type 0) (p:xTy -> Type 0) -> Type 0 where
  Ex' : (x:xTy) -> (p x) -> Exists' xTy p
-- projections (specialized to Nat)
fst : (p:Nat -> Type 0) -> (Exists' Nat p) -> Nat
fst = \p ex . case ex [_] of Ex' x _ -> x

snd : (p:Nat -> Type 0) -> (ex:Exists' Nat p) -> p (fst p ex)
snd = \p ex . case ex [ex_eq] of
  Ex' x px -> let    f_eq1 [_] = conv join by ex_eq at h . (fst p h) = (fst p ex)
                            -- : fst p (Ex' [Nat] [p] x px) = fst p ex
              in let f_eq2 [_] = conv f_eq1 by (join : fst p (Ex' [Nat] [p] x px) = x)
                                 at h . h = (fst p ex)
                            -- : x = fst p ex, so p x = p (fst p ex)
              in conv px by f_eq2 at x . p x

{-
unwrap : (p:Nat -> Type 0) -> (ex:Exists' Nat p) -> (ex = Ex' [Nat] [p] (fst p ex) (snd p ex))
-}

-- Extensional equality specialized to Nat -> Nat and with first
-- argument P, second L
data ExtensionalEqNat (prog f:Nat -> Nat) (g:Nat -> Nat) -> Type 0 where
  ExtEqNat : ((n:Nat) -> f n = g n) -> ExtensionalEqNat f g

-- [valOf f n v] is [v = f n].  Partially applied, [valOf f n] is used
-- as a predicate for a dependent pair witnessing that f terminates at
-- n, namely
--
--   (n:Nat) -> Exists' Nat (valOf f n)
--
-- is the type of termination proofs for f.
valOf : (Nat -> Nat) => Nat -> Nat -> Type 0
valOf = \f n . \v . v = f n

-- Conversion helper function: used below in [promote] to specialize
-- [v].  The abstract version here guides the [join], which fails when
-- attempted directly.
snd_valOf_red : (f:Nat -> Nat) => (n:Nat) -> (v:Nat)
             -> ((valOf f n) v = (v = f n))
snd_valOf_red = \f n v . join

-- Promote a terminating P function to an L function
promote : (f:Nat -> Nat) => ((n:Nat) -> Exists' Nat (valOf f n))
       -> Exists' (Nat -> Nat) (ExtensionalEqNat f)
promote = \f tf .
  let g [g_eq] = (\n . fst (valOf f n) (tf n) -- fst . tf
               : Nat -> Nat)
  in let eq [_] = (\n .
    let    gn_eq1 [_] = conv join by g_eq at h . h n = g n
                   -- : (\n1 . fst (valOf f n1) (tf n1)) n = g n
    in let gn_eq2 [_] =
                   -- : fst (valOf f n) (tf n) = g n
      conv gn_eq1
      by (join : (\n1 . fst (valOf f n1) (tf n1) : Nat -> Nat) n
               = fst (valOf f n) (tf n))
      at h . h = g n
    in let fn_eq1 [_] = conv (snd (valOf f n) (tf n))
                        by (snd_valOf_red f n (fst (valOf f n) (tf n)))
                        at t.t
                   -- : (fst (valOf f n) (tf n)) = f n
    in conv gn_eq2 by fn_eq1 at h . h = g n
                : (n:Nat) -> f n = g n)
  in Ex' [Nat -> Nat] [ExtensionalEqNat f] g (ExtEqNat [f] [g] eq)
