module Fin where

import Prelude

data Fin (n : Nat) : Type 0 where
  FZ of [m:Nat][ m_eq : (n = Succ m) ] 
  FS of [m:Nat][ m_eq : (n = Succ m) ](_ : Fin m)

-- equality is decidable

log eq_fin : [n: Nat] -> Fin n -> Fin n -> Bool
eq_fin =  
 ind eq [n] = \fn1 fn2 .
   case fn1 [n1_eq], fn2 [_] of 
      FZ [m1][m1_eq], FZ [m2][m2_eq] -> True
      FS [m1][m1_eq] fn1', FS [m2][m2_eq] fn2' -> 
		   let _ = uneraseEq [Nat][Nat][m1][m2] [sm_eq_Sn__m_eq_n m1 m2 _] in
		   eq [m1] [ord m1_eq] fn1'  fn2'
      _ , _ -> False
