{- The time-honoured toy example of proof by reflection: a monoid solver. -}

module Monoid where

import Prelude
import Arithmetic

usually log

data MonoidExpr (S : Type) : Type where
  ExprConst of (x : S)
  ExprUnit
  ExprOp of (e1 : MonoidExpr S) (e2 : MonoidExpr S)



denote : (S : Type) -> (unit : S) -> (op : S -> S -> S) -> (MonoidExpr S) -> S
denote S unit op = ind den e =
  case e [e_eq] of
    ExprConst s -> s
    ExprUnit -> unit
    ExprOp e1 e2 -> op (den e1 [ord e_eq]) (den e2 [ord e_eq])

data Simplified (S : Type) (unit : S) (op : S -> S -> S) (e : MonoidExpr S) : Type where
  Simple of (e' : MonoidExpr S) (pf : denote S unit op e = denote S unit op e')


prog simplify :  (S : Type) -> (unit : S) -> (op : S -> S -> S) 
                 -> (left_id : (a:S) -> op unit a = a) 
                 -> (right_id : (a:S) -> op a unit = a)
                 -> (assoc : (a b c:S) -> op (op a b) c = op a (op b c))
                 -> (e : MonoidExpr S) -> Simplified S unit op e
simplify S unit op left_id right_id assoc = rec simpl e =
  case e of
    ExprConst _ -> Simple e join
    ExprUnit -> Simple e join
    ExprOp e1 e2 -> 
       -- unfold/smarjoin will not prove this equation, because of "eta-expanded" step rule for ind:
      let _ = (pjoin : denote S unit op (ExprOp e1 e2)   
                       = op (denote S unit op e1) (denote S unit op e2)) in
      case (simpl e1), (simpl e2) of
         (Simple (ExprOp e11 e12) _), (Simple e2' _) ->
             let _ = (pjoin : denote S unit op (ExprOp e11 e12)
                              = op (denote S unit op e11) (denote S unit op e12)) in
             let _ = (pjoin : denote S unit op (ExprOp e11 (ExprOp e12 e2'))
                              = op (denote S unit op e11) (op (denote S unit op e12) (denote S unit op e2'))) in
             let [_] = assoc (denote S unit op e11) (denote S unit op e12) (denote S unit op e2') in
               case (simpl (ExprOp e11 (ExprOp e12 e2'))) of
                  Simple e3 _ -> Simple e3 _
         (Simple e1' _), (Simple ExprUnit _) ->
             unfold (denote S unit op ExprUnit) in
             let [_] = right_id (denote S unit op e1') in
               Simple e1' smartjoin 
         (Simple ExprUnit _), (Simple e2' _) -> 
             unfold (denote S unit op ExprUnit) in
             let [_] = left_id (denote S unit op e2') in
             Simple e2' smartjoin  
         (Simple e1' _), (Simple e2' _) -> 
             let _ = (pjoin : denote S unit op (ExprOp e1' e2')
                            = op (denote S unit op e1') (denote S unit op e2')) in
             Simple (ExprOp e1' e2') _



{-

-- It might be even better if denote could also be in prog? But this does not work:



prog denote : (S : Type) -> (unit : S) -> (op : S -> S -> S) -> (MonoidExpr S) -> S
denote = \ S unit op. 
  rec den e =
  case e of
    ExprConst s -> s
    ExprUnit -> unit
    ExprOp e1 e2 -> 
      -- The lets here are for fighting with @-types. An effect-style system would probably work better.
      let prog r1 = den e1 in 
      let prog r2 = den e2 in
       op r1 r2

data Simplified (S : Type) (unit : S) (op : S -> S -> S) (e : MonoidExpr S) : Type where
  Simple of (e' : MonoidExpr S) (pf : denote S unit op e = denote S unit op e')


-- This typechecks, but....

prog simplify :  (S : Type) -> (unit : S) -> (op : S -> S -> S) 
                 -> (left_id : (a:S) -> op unit a = a) 
                 -> (right_id : (a:S) -> op a unit = a)
                 -> (assoc : (a b c:S) -> op (op a b) c = op a (op b c))
                 -> (e : MonoidExpr S) -> Simplified S unit op e
simplify S unit op left_id right_id assoc = rec simpl e =
  case e of
    ExprConst _ -> Simple e join
    ExprUnit -> Simple e join
    ExprOp e1 e2 -> 
      case (simpl e1), (simpl e2) of
         (Simple e1' _), (Simple ExprUnit _) ->
             unfold (denote S unit op ExprUnit) in
             let prog r1 = denote S unit op e1' in  --Drawback of having denote in prog, this is not erasable!
             let _ = right_id r1 in   -- CVB, so we need to evaluate r1 (above) in order to invoke the axiom.
                                      -- But this will not work, when proving things about open terms simplify will get stuck.
             Simple e1' smartjoin
         (Simple ExprUnit _), (Simple e2' _) -> 
             unfold (denote S unit op ExprUnit) in
             let prog r2 = denote S unit op e2' in
             let _ = left_id r2 in
             Simple e2' smartjoin
         (Simple e1' _), (Simple e2' _) -> Simple (ExprOp e1' e2') smartjoin

-}
