module Product where

--Everything is @log
usually log

data Times (A:Type 0)(B : Type 0) : Type 0 where
  Prod of (_ : A) (_ : B)

data Sigma (A:Type 0) (b : A -> Type 0) : Type 0 where
  Pair of (x:A) (_ : b x)


log fst : [A:Type 0] -> [b : A -> Type 0] -> Sigma A b -> A
fst = \ [A] [b] p . 
  case p [_] of 
    Pair x y -> x

log snd : [A:Type 0] -> [b : A  -> Type 0] -> (x:Sigma A b) 
	     -> b (fst [A][b] x)
snd = \ [A] [b] p .
  case p [_] of 
    Pair x y -> 
	    let _ = (join 10 : x = fst [A] [b] (Pair x y)) in
		 y

log map : [A : Type 0] -> [p : A -> Type 0] -> 
	   [B : Type 0] -> [q : B -> Type 0] -> 
		(f : A -> B) ->
		(g : (x: A) -> (p x) -> q (f x)) ->
		Sigma A p -> Sigma B q
map = \ [A][p][B][q] f g x. 
  case x [_] of 
    Pair x y -> Pair (f x) (g x y)