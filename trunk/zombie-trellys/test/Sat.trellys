-- Sat solver example

-- This sat solver is not guaranteed to find a satisfying assignment, 
-- but if it does terminate with an assignment, that assignment must 
-- satisfy the formula.

-- The only prog function in the file is the main loop. All other helper
-- functions in this file are logical. It just happened that way---the helper
-- functions were easy to fit into the logical fragment.

-- This example also uses dependent types for bounds information. Variables are
-- represented as Fins. Formulas are indexed by the number of variables. An 
-- assignment is a vector with length equal to the number of free variables in 
-- the formula.

-- This file could also prove that partial_interp = Just True 
-- implies that interp = True

module Sat where

import Prelude
import List
import Product
import Fin
import Vectors
import Maybe

usually log

-- Literals are natural numbers paired with booleans
-- clauses are lists of literals
-- formulae are lists of clauses

log Formula : (n:Nat) -> Type 0
Formula = \n. List (List (Times (Fin n) Bool))

-- an environment is a mapping from variables to truth values
log Env : (n:Nat) -> Type 0
Env = \ n . Vector Bool n

log interp_lit : [n:Nat] => Vector Bool n -> (Times (Fin n) Bool @ log) -> Bool
interp_lit = \ [n] env lit . case lit [l_eq] of 
   Prod fn b -> bool_eq b (lookup [?][?] fn env)
     
log interp : [n:Nat] => Vector Bool n -> Formula n -> Bool
interp = \ [n] env formula . 
  let _ = ( join : Formula n = List (List (Times (Fin n) Bool))) in
  all (any (interp_lit env)) formula

-- general procedure for sat solving, i.e. showing that Phi is satisfiable
-- we want to search for a satisfying assignment to the literals in Phi

-- convert a partial assignment to an environment
-- (unassigned variables are just true)
log extend : [n:Nat] => Vector (Maybe Bool) n -> Vector Bool n
extend = \[n] xs . vmap [?][?] (maybe True) [n] xs

log partial_interp_lit : [n:Nat] => (partial : Vector (Maybe Bool) n) 
              -> (lit : (Times (Fin n) Bool) @ log) -> Maybe Bool
partial_interp_lit = \[n] p lit .
   case lit [_] of 
     Prod fn b -> case (lookup [?][?] fn p) [_] of 
         Just v  -> Just (bool_eq b v)
         Nothing -> Nothing

-- is this literal unassigned by the map?
log unassigned_lit : [n : Nat] => (p : Vector (Maybe Bool) n) ->
       (c : (Times (Fin n) Bool) @ log) -> Bool
unassigned_lit = \[n] p lit . 
  (maybe_eq bool_eq) (partial_interp_lit p lit) Nothing

-- is this literal known to be true?
log true_lit : [n : Nat] => (p : Vector (Maybe Bool) n) ->
       (c : (Times (Fin n) Bool) @ log) -> Bool
true_lit = \[n] p lit . 
  (maybe_eq bool_eq) (partial_interp_lit p lit) (Just True)

-- is this literal known to be false?
log false_lit : [n : Nat] => (p : Vector (Maybe Bool) n) ->
       (c : (Times (Fin n) Bool) @ log) -> Bool
false_lit = \[n] p lit . 
  (maybe_eq bool_eq) (partial_interp_lit p lit) (Just False)

-- a clause is known to be true if any literal has been assigned true
-- or known to be false if all literals are assigned false
-- otherwise its truth value is unknown.
log partial_interp_clause : [n:Nat] => (partial : Vector (Maybe Bool) n) 
              -> (clause : List (Times (Fin n) Bool) @ log) -> Maybe Bool
partial_interp_clause = \[n] p c. 
  case (any (true_lit p) c) [_] of 
    True -> Just True
    False -> case (all (false_lit p) c) [_] of 
        True -> Just False
        False -> Nothing

-- a formula is known to be true if all clauses are known to be true
-- and known to be false if any clauses are known to be false.
log partial_interp : [n:Nat] => (partial : Vector (Maybe Bool) n) 
              -> (formula : Formula n) -> Maybe Bool
partial_interp = \ [n] p f . 
   let _ = ( join : Formula n = List (List (Times (Fin n) Bool))) in
   let f' = map (partial_interp_clause p) f in
   case (all (maybe_eq bool_eq (Just True)) f') [_] of 
     True -> Just True
     False -> case (any (maybe_eq bool_eq (Just False)) f') [_] of 
        True -> Just False
        False -> Nothing

-- unit propagation
-- Find a clause with only one unassigned literal and no other true
-- literals. That one must be true.

log unit_lit_clause : [n : Nat] => (p : Vector (Maybe Bool) n) ->
       (c : List (Times (Fin n) Bool) @ log) -> List (Times (Fin n) Bool)
unit_lit_clause = \ [n] p c . 
   let unassigned_lits = filter (unassigned_lit p) c in
	let true_lits = filter (true_lit p) c in
	case (and (nat_eq (length unassigned_lits) 1)
	          (nat_eq (length true_lits)       0)) [_] of
	  True -> c 
	  False -> Nil

log unit_lits : [n : Nat] => (p : Vector (Maybe Bool) n) ->
       (formula : Formula n) -> List (Times (Fin n) Bool)
unit_lits = \ [n] p f . 
   let _ = ( join : Formula n = List (List (Times (Fin n) Bool))) in
	concatMap (unit_lit_clause p) f 

-- future work: pure literal assignment
-- If a propositional variable occurs with only one polarity in the
-- formula, it is called pure. Pure literals can always be assigned in
-- a way that makes all clauses containing them true. Thus, these
-- clauses do not constrain the search anymore and can be deleted. 

-- update the partial map validating the literals in the list
log set_lits : [n:Nat] => List (Times (Fin n) Bool) -> 
                  Vector (Maybe Bool) n -> Vector (Maybe Bool) n
set_lits = \[n] . ind set_lits l = \v.
  case l [l_eq] of 
    Nil -> v
    Cons x xs -> 
	    let v' = set_lits xs [ord l_eq] v in
		 set [?][n] (pi1 x) (Just (pi2 x) : Maybe Bool) v'


-- the result of sat solving, a satisfiable assignment
-- or "UNSAT"
data Answer (n : Nat) (formula : Formula n) : Type 0 where
  SAT    of (partial : Vector (Maybe Bool) n) 
            [_ : partial_interp partial formula = (Just True : Maybe Bool) ]
  UNSAT

-- find the index of the first unassigned variable in the partial map
log next_var : [n:Nat] -> Vector (Maybe Bool) n -> Maybe (Fin n)    
ind next_var [n] = \ v . 
  case v [v_eq] of 
    VNil [pf]  -> Nothing
    VCons [m][m_eq] x xs -> case x [_] of 
       Just b  -> maybe_map (fin_succ [m][m_eq]) (next_var [m][ord m_eq] xs)
       Nothing -> Just (FZ [m][m_eq])

-- the simplest version goes through the literals one by one, trying assignments
-- until it finds a satisfying state for the given formula
-- prunes the search space when it is discovered to be UNSAT
-- looks for unit literals to propagate

prog dpll : [n:Nat] => (formula : Formula n) 
           -> Vector (Maybe Bool) n -> Answer n formula
rec dpll [n] = \ formula partial .
 case (partial_interp partial formula) [s_eq] of 
   Just True  -> SAT partial [s_eq]
   Just False -> UNSAT
   Nothing -> 
     let units = unit_lits partial formula in
     case (null [?] units) [_] of 
        False -> dpll formula (set_lits units partial)
        True  ->
          case (next_var [n] partial) [_] of 
             Nothing -> UNSAT -- no more variables to try
             Just m -> 
               case (dpll formula
                       (set [?][?] m (Just False : Maybe Bool) partial)) [_] of 
                 SAT partial [pf] -> SAT partial [pf]
                 UNSAT     ->
                    dpll formula 
                      (set [?][?] m (Just True : Maybe Bool) partial)

-- The termination of this algorithm decreases with the number of unassigned 
-- literals in the partial map. Perhaps not TOO difficult to show...

-- Would also be good to get some experience using HOFs in the programmatic 
-- fragment.
