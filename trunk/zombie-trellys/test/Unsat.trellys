-- The Sat-solver example, extended to also track proofs of unsatisfiability.

-- This file could also prove that partial_interp = Just True 
-- implies that interp = True

module Unsat where

import Prelude
import Logic
import List
import Product
import Fin
import Vectors
import Maybe

usually log

-----------------------------------------------------
-- Definitions
-- These are used in the specification.
-----------------------------------------------------


-- Literals are natural numbers paired with booleans
-- clauses are lists of literals
-- formulae are lists of clauses

log Formula : (n:Nat) -> Type 
Formula = \n. List (List (Times (Fin n) Bool))

-- an environment is a mapping from variables to truth values
log Env : (n:Nat) -> Type 
Env = \ n . Vector Bool n

log interp_lit : [n:Nat] => Vector Bool n -> (Times (Fin n) Bool @ log) -> Bool
interp_lit = \ [n] env lit . case lit of 
   Prod fn b -> bool_eq b (lookup fn env)
     
log interp : [n:Nat] => Vector Bool n -> Formula n -> Bool
interp = \ [n] env formula . 
  unfold (Formula n) in
  all (any (interp_lit env)) (formula : List (List (Times (Fin n) Bool)))

-- convert a partial assignment to an environment
-- (unassigned variables are just true)
log extend : [n:Nat] => Vector (Maybe Bool) n -> Vector Bool n
extend = \[n] xs . vmap (maybe True) [n] xs


log Extends : (n:Nat) => Vector (Maybe Bool) n -> Vector Bool n -> Type 0
Extends n psi phi = 
  (i : Fin n) -> (b:Bool) 
   -> (lookup i psi = (Just b)) 
   -> (lookup i phi = b)

data Sat (n:Nat) (formula : Formula n) : Type where
  SAT    of (partial : Vector (Maybe Bool) n) 
            [_ : interp (extend partial) formula = True ]

data Unsat (n:Nat) (formula : Formula n) (phi : Vector (Maybe Bool) n) : Type where
  UNSAT  of [_ : (phi' : Vector Bool n) -> Extends phi phi' -> (interp phi' formula = True)]

---------------------------------------------------
-- Implementation stuff
---------------------------------------------------

log partial_interp_lit : [n:Nat] => (partial : Vector (Maybe Bool) n) 
              -> (lit : (Times (Fin n) Bool) @ log) -> Maybe Bool
partial_interp_lit = \[n] p lit .
   case lit of 
     Prod fn b -> case (lookup fn p) of 
         Just v  -> Just (bool_eq b v)
         Nothing -> Nothing

-- is this literal unassigned by the map?
log unassigned_lit : [n : Nat] => (p : Vector (Maybe Bool) n) ->
       (c : (Times (Fin n) Bool) @ log) -> Bool
unassigned_lit = \[n] p lit . 
  (maybe_eq bool_eq) (partial_interp_lit p lit) Nothing

-- is this literal known to be true?
log true_lit : [n : Nat] => (p : Vector (Maybe Bool) n) ->
       (c : (Times (Fin n) Bool) @ log) -> Bool
true_lit = \[n] p lit . 
  (maybe_eq bool_eq) (partial_interp_lit p lit) (Just True)

-- is this literal known to be false?
log false_lit : [n : Nat] => (p : Vector (Maybe Bool) n) ->
       (c : (Times (Fin n) Bool) @ log) -> Bool
false_lit = \[n] p lit . 
  (maybe_eq bool_eq) (partial_interp_lit p lit) (Just False)

-- a clause is known to be true if any literal has been assigned true
-- or known to be false if all literals are assigned false
-- otherwise its truth value is unknown.
log partial_interp_clause : [n:Nat] => (partial : Vector (Maybe Bool) n) 
              -> (clause : List (Times (Fin n) Bool) @ log) 
              -> Or (any (interp_lit (extend partial)) clause = True)
                  (Or ((phi : Vector Bool n)
                         -> Extends partial phi -> any (interp_lit phi) clause = False)
                      (Fin n))
                                                  
partial_interp_clause = \[n] p c. TRUSTME

-- a formula is known to be true if all clauses are known to be true
-- and known to be false if any clauses are known to be false.
--
-- If the truth value depends on some unassigned variable we return
-- that variable.  In order for the algorithm to terminate, the
-- variable we return has better really be unassigned. But that's not
-- required for the soundness proof, so we don't state it in the type.
log partial_interp : [n:Nat] 
              => (partial : Vector (Maybe Bool) n) 
              -> (f : Formula n)
              -> Or (Sat n f) 
                    (Or (Unsat n f partial)
                        (Fin n))
partial_interp [n] partial = ind loop f = 
  unfold (Formula n) in
    case (f : List (List (Times (Fin n) Bool))) [eq_f] of
      Nil -> let epartial = extend partial in
             --This case show a limitation of the "deterministic reduction modulo",
             -- if we didn't name "extend partial" unfold would try to step into it, which is bad.
             unfold (interp epartial Nil) in
               InL (SAT  partial [_])
      Cons c cs -> 
        case (partial_interp_clause partial c) of
          InL sat_c -> case (loop cs [ord eq_f]) of
                         InL sat_cs -> TRUSTME --sigh, we need to keep "partial" fixed, which creates additional problems.
                                      --InL (SAT partial [all_Cons (any (interp_lit (extend partial))) c cs sat_c sat_cs])
                         InR _      -> TRUSTME
          InR (InL unsat) -> TRUSTME
          InR (InR i) -> InR (InR i)

{-
partial_interp = \ [n] p f . 
   unfold (Formula n) in
   let f' = map (partial_interp_clause p) (f :  List (List (Times (Fin n) Bool))) in
   if (all (maybe_eq bool_eq (Just True)) f')
     then Just True
     else if (any (maybe_eq bool_eq (Just False)) f') 
          then Just False
          else Nothing
-}

-- unit propagation
-- Find a clause with only one unassigned literal and no other true
-- literals. That one must be true.

log unit_lit_clause : [n : Nat] => (p : Vector (Maybe Bool) n) ->
       (c : List (Times (Fin n) Bool) @ log) -> List (Times (Fin n) Bool)
unit_lit_clause = \ [n] p c . 
   let unassigned_lits = filter (unassigned_lit p) c in
	let true_lits = filter (true_lit p) c in
	if (and (nat_eq (length unassigned_lits) 1)
	          (nat_eq (length true_lits)       0)) 
	  then c 
	  else Nil

log unit_lits : [n : Nat] => (p : Vector (Maybe Bool) n) ->
       (formula : Formula n) -> List (Times (Fin n) Bool)
unit_lits = \ [n] p f . 
   unfold (Formula n) in
	concatMap (unit_lit_clause p) (f :  List (List (Times (Fin n) Bool)))

-- future work: pure literal assignment
-- If a propositional variable occurs with only one polarity in the
-- formula, it is called pure. Pure literals can always be assigned in
-- a way that makes all clauses containing them true. Thus, these
-- clauses do not constrain the search anymore and can be deleted. 

-- update the partial map validating the literals in the list
log set_lits : [n:Nat] => List (Times (Fin n) Bool) -> 
                  Vector (Maybe Bool) n -> Vector (Maybe Bool) n
set_lits = \[n] . ind set_lits l = \v.
  case l [l_eq] of 
    Nil -> v
    Cons x xs -> 
	    let v' = set_lits xs [ord l_eq] v in
		 set (pi1 x) (Just (pi2 x) : Maybe Bool) v'


-- find the index of the first unassigned variable in the partial map
log next_var : [n:Nat] -> Vector (Maybe Bool) n -> Maybe (Fin n)    
ind next_var [n] = \ v . 
  case v of 
    VNil [pf]  -> Nothing
    VCons [m][m_eq] x xs -> case x of 
       Just b  -> maybe_map (fin_succ [m][m_eq]) (next_var [m][ord m_eq] xs)
       Nothing -> Just (FZ [m][m_eq])

log extends_same :  [n:Nat] => (i : Fin n)
                   -> (psi : Vector (Maybe Bool) n) 
                   -> (phi : Vector Bool n)
                   -> Extends psi phi
                   -> Extends (set i (Just (lookup i phi) : Maybe Bool) psi) phi
extends_same [n] i psi phi extends =
  let psi' = (set i (Just (lookup i phi)) psi) in
  unfold (Extends psi phi) in 
  unfold (Extends psi' phi) in
    (\ j b h . 
       case (fin_eq [n] j i) [_] of
         True  -> let _ = (fin_eq_True [n] j i _) in
                  let b' = lookup j phi in
                  let _ = (lookup_set i (Just (lookup i phi)) psi 
                            : lookup i psi' = Just b') in 
                  let _ = injectivity (_ : Just b' = Just b) 0 in
                    _
         False -> let _ = (lookup_set2 j i (Just (lookup i phi)) psi _) in
                  let _ = extends j b _ in
                    _ )
--                    ^^^^
-- Here is a case where the expressive lam-rule is useful. Without it we would
-- have to explicitly annotate that the \ has type
--  : (j:Fin n) -> (b:Bool) -> (lookup j psi' = (Just b))  -> (lookup j phi = b))


-- The key lemma for verified unsat:
log unsat_branch : [n:Nat] => (i : Fin n) -> (f : Formula n)
                   -> (phi : Vector (Maybe Bool) n) 
                   -> Unsat n f (set i (Just True) phi) 
                   -> Unsat n f (set i (Just False) phi)
                   -> Unsat n f phi
unsat_branch [n] i f phi unsat1 unsat2 = 
  case unsat1 [_], unsat2 [_] of
    UNSAT [h1] , UNSAT [h2] ->
      UNSAT [ \ psi extends .
                 case (lookup i psi) [_] of
                   True  -> h1 psi (extends_same i phi psi extends)
                   False -> h2 psi (extends_same i phi psi extends) ]

-- the simplest version goes through the literals one by one, trying assignments
-- until it finds a satisfying state for the given formula
-- prunes the search space when it is discovered to be UNSAT
-- looks for unit literals to propagate

prog dpll : [n:Nat]
             => (formula : Formula n) 
             -> (partial : Vector (Maybe Bool) n)
             -> (Or (Sat n formula) (Unsat n formula partial))
rec dpll [n] = \ formula partial .
 case (partial_interp partial formula) [s_eq] of 
   InL sat  -> InL sat
   InR (InL unsat) -> InR unsat
   InR (InR i) -> 
          case (dpll formula
                  (set i (Just True) partial)) [_] of 
            InL sat -> InL sat
            InR unsat1   ->
               case (dpll formula 
                      (set i (Just False) partial)) [_] of
                 InL sat -> InL sat
                 InR unsat2 -> InR (unsat_branch i formula partial unsat1 unsat2)

-- The termination of this algorithm decreases with the number of unassigned 
-- literals in the partial map. Perhaps not TOO difficult to show...

-- Would also be good to get some experience using HOFs in the programmatic 
-- fragment.

