module Vectors where
import Prelude
import Fin

-- Definition of the vector type and proofs of properties about it.

data Vector (A : Type 0) (n : Nat) : Type 0 where
   VNil  of [n = 0] 
   VCons of [size : Nat] [n = Succ size]  (x:A@log) (xs : Vector A size)

-- terminating recursor for the vector type
recvec : [a : Type 0] -> [c : ([n : Nat] -> (v:Vector a n) -> Type 0)@log] ->
         (base : [n:Nat] -> [n_eq:n = 0] -> (c [n] (VNil [n_eq]))@log) ->
         (step : [n:Nat] -> [n':Nat] -> [n_eq:n = Succ n'] ->
            (x:a@log) -> (xs : Vector a n'@log) -> (ih : c [n'] xs @log) ->
            c [n] (VCons [n'] [n_eq] x xs)@log) ->
         [n:Nat] -> (v:Vector a n @log) -> (c [n] v)
recvec = \ [a] . \ [c] . \ base . \ step .
           ind recvec [n] = \ v .
             case v [v_eq] of
               VNil [n_eq] -> base [n] [n_eq]
               VCons [n'] [n_eq] x xs -> step [n] [n'] [n_eq] x xs (recvec [n'] [ord n_eq] xs)


vmap : [a : Type 0] => [b : Type  0] => ((x:a@log) -> b @log) ->
       [n : Nat] -> (xs : Vector a n) -> Vector b n
vmap = \ [a] . \ [b] . \ f . ind vmap [n] = \ xs .
        case xs [xs_eq] of
          VNil [n_eq] -> VNil [n_eq]
          VCons [n'] [n_eq] x xs -> VCons [n'] [n_eq] (f x) (vmap [n'] [ord n_eq] xs) 


log head : [A : Type 0] => [n:Nat] => Vector A (Succ n) -> A
head = \ [A][n] v . case v [v_eq] of 
  VNil  [n_eq] -> contra (_ : 0 = Succ n)
  VCons [m][m_eq] f t -> f

log tail : [A : Type 0] => [n:Nat] => Vector A (Succ n) -> Vector A n
tail = \ [A][n] v . case v [v_eq] of 
  VNil  [n_eq] -> contra (_ : 0 = Succ n)
  VCons [m][m_eq] f t ->
   let _ = uneraseEq [Nat][Nat][m][n][sm_eq_Sn__m_eq_n m n m_eq]  -- BLEAH!
   -- rea
   in t


log lookup : [A: Type 0] => [n:Nat] -> Fin n -> Vector A n -> A
lookup = \ [A] . 
  ind recFin [n] = \ f v . 
    case f [f_eq] of
      FZ [m][m_eq] -> head v
      FS [m][m_eq] fm -> recFin [m] [ord m_eq] fm (tail v)


-- create a vector with n copies of its argument
log repeat : [A:Type 0] => (A @ log) -> (n:Nat) -> Vector A n
repeat = \ [A] a . 
  ind rep n = 
    case n [n_eq] of 
      Zero -> VNil [_]
      Succ m -> VCons [m][_] a (rep m [ord n_eq])

-- update the mth component of the vector to be 'a'
log set : [A:Type 0] => [n:Nat] -> (m:Fin n) ->  (a:A @ log) -> Vector A n -> Vector A n
set = \ [A] . 
  ind set [n] = \ m a v.
       case m [n_eq] of 
         FZ [p][p_eq]    -> VCons [p][_] a (tail v)
         FS [p][p_eq] fm -> VCons [p][_] a (set [p][ord p_eq] fm a (tail v))


{-
log lookup_set : [A:Type 0] => [n:Nat] => (i:Fin n) -> (a:A @log) -> (v : Vector A n)
                 -> lookup [n] i (set [n] i a v) = a
lookup_set = \[A]. ind ih [n] = \ i a v .
  case i [_], v [_] of
    FZ [p][_]   , VNil [_] -> contra (_ : 0 = (Succ p))
    FS [p][_] _ , VNil [_] -> contra (_ : 0 = (Succ p))
    FZ [p][_]   , VCons [m][_] x xs ->
	    
	    unfold (set [n] (FZ [p][_]) a (VCons [m][_] x xs)) in  -- this is a pattern match failure in EqualityReasoning.
--	    let _ = (join : set [n] (FZ [p][_]) a (VCons [m][_] x xs) = (VCons [m][_] a xs : Vector A n)) in
       unfold (lookup [n] (FZ [p][_]) (VCons [?][_] a xs)) in  -- this causes stack overflow when writing elaborated terms
--       let _ = (join : lookup [n] (FZ [p][_]) (VCons [m][_] a xs) = a) in
       _
    FS [p][p_eq] j , VCons [m][m_eq] x xs -> 
       let _ = injectivity (_ : Succ p = Succ m) 0 in
          TRUSTME
             
-}
